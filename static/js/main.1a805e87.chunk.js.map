{"version":3,"sources":["components/AuthenticatedRoute/AuthenticatedRoute.js","components/AutoDismissAlert/AutoDismissAlert.js","components/Header/Header.js","components/Footer/Footer.js","apiConfig.js","api/auth.js","components/auth/SignUp.js","components/AutoDismissAlert/messages.js","components/auth/SignIn.js","components/auth/SignOut.js","components/auth/ChangePassword.js","api/world.js","components/world/CreateWorld.js","components/world/IndexWorld.js","components/world/WorldComponent.js","components/world/ShowWorld.js","components/world/UpdateWorld.js","api/character.js","components/character/CreateCharacter.js","components/character/IndexCharacter.js","components/character/CharacterComponent.js","components/character/ShowCharacter.js","components/character/UpdateCharacter.js","App.js","index.js"],"names":["AuthenticatedRoute","user","Component","component","render","rest","props","to","AutoDismissAlert","handleClose","setState","show","state","timeoutId","this","setTimeout","clearTimeout","variant","heading","message","deleteAlert","id","Alert","dismissible","onClose","className","Heading","React","authenticatedOptions","type","unauthenticatedOptions","alwaysOptions","Header","Navbar","bg","expand","Brand","style","color","textDecoration","Toggle","aria-controls","Collapse","Nav","Footer","fixed","email","apiUrls","apiUrl","window","location","hostname","signIn","credentials","axios","url","method","data","password","SignUp","handleChange","event","target","name","value","onSignUp","preventDefault","msgAlert","history","setUser","password_confirmation","passwordConfirmation","then","res","push","catch","error","Form","onSubmit","Group","controlId","Label","Control","required","placeholder","onChange","Button","withRouter","SignIn","onSignIn","SignOut","clearUser","headers","Authorization","token","signOut","finally","ChangePassword","onChangePassword","passwords","old","oldPassword","new","newPassword","changePassword","showWorld","CreateWorld","onCreateWorld","world","game","setting","description","createWorld","as","rows","IndexAllWorlds","loading","indexAllWorlds","response","worlds","console","log","worldJsx","map","Card","width","Body","Title","Subtitle","Text","reverse","World","ShowWorld","handleDeleteWorld","match","deleteWorld","params","owner","worldId","onClick","UpdateWorld","userInput","currState","onUpdateWorld","updateWorld","err","showCharacter","CreateCharacter","onCreateCharacter","character","level","race","discipline","background","abilities","items","backstory","createCharacter","IndexAllCharacters","indexAllCharacters","characters","characterJsx","Character","ShowCharacter","handleDeleteCharacter","deleteCharacter","UpdateCharacter","onUpdateCharacter","updateCharacter","App","msgAlerts","filter","msg","uuid","path","exact","appJsx","basename","process","ReactDOM","document","getElementById"],"mappings":"wRA8BeA,EAxBY,SAAC,GAKrB,IAJLC,EAII,EAJJA,KACWC,EAGP,EAHJC,UACAC,EAEI,EAFJA,OACGC,EACC,iBAEJ,OAAIJ,GAAQG,EACH,cAAC,IAAD,2BAAWC,GAAX,IAAiBD,OAAQA,KAM9B,cAAC,IAAD,2BACMC,GADN,IAEED,OAAQ,SAACE,GAAD,OACNL,EAAO,cAACC,EAAD,eAAeI,IAAY,cAAC,IAAD,CAAUC,GAAG,W,QC0B1CC,G,wDA3Cb,WAAaF,GAAQ,IAAD,8BAClB,cAAMA,IAeVG,YAAc,kBAAM,EAAKC,SAAS,CAAEC,MAAM,KAdtC,EAAKC,MAAQ,CACXD,MAAM,GAER,EAAKE,UAAY,KALC,E,qDAQpB,WACEC,KAAKD,UAAYE,WAAWD,KAAKL,YAAa,O,kCAGhD,WACEO,aAAaF,KAAKD,a,oBAKtB,WACE,MAAuDC,KAAKR,MAApDW,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,YAAaC,EAAhD,EAAgDA,GAShD,OANKP,KAAKF,MAAMD,MACdI,YAAW,WACTK,EAAYC,KACX,KAIH,cAACC,EAAA,EAAD,CACEC,aAAW,EACXZ,KAAMG,KAAKF,MAAMD,KACjBM,QAASA,EACTO,QAASV,KAAKL,YAJhB,SAKE,sBAAKgB,UAAU,YAAf,UACE,cAACH,EAAA,EAAMI,QAAP,UAAgBR,IAChB,mBAAGO,UAAU,aAAb,SAA2BN,a,GArCJQ,IAAMzB,Y,uBCC/B0B,G,MACJ,eAAC,WAAD,WAGE,cAAC,IAAD,CAASrB,GAAG,iBAAZ,SACE,wBACEsB,KAAK,SACLJ,UAAU,2BACVJ,GAAG,aAHL,8BAOF,cAAC,IAAD,CAASd,GAAG,WAAZ,SACE,wBACEsB,KAAK,SACLJ,UAAU,2BACVJ,GAAG,YAHL,iCAOF,cAAC,IAAD,CAASd,GAAG,qBAAZ,SACE,wBACEsB,KAAK,SACLJ,UAAU,2BACVJ,GAAG,kBAHL,kCAOF,cAAC,IAAD,CAASd,GAAG,eAAZ,SACE,wBACEsB,KAAK,SACLJ,UAAU,2BACVJ,GAAG,YAHL,4CAUAS,EACJ,eAAC,WAAD,WACE,cAAC,IAAD,CAASvB,GAAG,WAAWkB,UAAU,WAAjC,qBACA,cAAC,IAAD,CAASlB,GAAG,WAAWkB,UAAU,WAAjC,wBAIEM,EACJ,cAAC,WAAD,IAsBaC,EAlBA,SAAC,GAAD,IAAG/B,EAAH,EAAGA,KAAH,OACb,eAACgC,EAAA,EAAD,CAAQC,GAAG,OAAOjB,QAAQ,OAAOkB,OAAO,KAAxC,UACE,cAACF,EAAA,EAAOG,MAAR,UACE,cAAC,IAAD,CAAM7B,GAAG,IAAI8B,MAAO,CAAEC,MAAO,UAAWC,eAAgB,QAAxD,2BAEF,cAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBrB,GAAG,mBAApB,SACE,eAACsB,EAAA,EAAD,CAAKlB,UAAU,UAAf,UAIGM,EACA9B,EAAO2B,EAAuBE,WC9DjCF,EACJ,eAAC,WAAD,WACE,cAAC,IAAD,CAASrB,GAAG,cAAckB,UAAU,WAApC,6BACA,cAAC,IAAD,CAASlB,GAAG,YAAYkB,UAAU,WAAlC,yBAoCEK,EACJ,cAAC,WAAD,IAMIC,EACJ,cAAC,WAAD,IAsBaa,EAlBA,SAAC,GAAD,IAAG3C,EAAH,EAAGA,KAAH,OACb,eAACgC,EAAA,EAAD,CAAQC,GAAG,OAAOjB,QAAQ,OAAOkB,OAAO,KAAKU,MAAM,SAAnD,UACE,cAACZ,EAAA,EAAOG,MAAR,IAGA,cAACH,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBrB,GAAG,mBAApB,SACE,eAACsB,EAAA,EAAD,CAAKlB,UAAU,UAAf,UACGxB,GACC,uBAAMwB,UAAU,mBAAhB,sBAA6CxB,EAAK6C,SAEnDf,EACA9B,EAAO2B,EAAuBE,W,OCrEjCiB,EACQ,yCADRA,EAES,wBASAC,EANkB,cAA7BC,OAAOC,SAASC,SACTJ,EAEAA,E,iBCQEK,EAAS,SAACC,GACrB,OAAOC,IAAM,CACXC,IAAKP,EAAS,YACdQ,OAAQ,OACRC,KAAM,CACJJ,YAAa,CACXP,MAAOO,EAAYP,MACnBY,SAAUL,EAAYK,c,eCfxBC,E,kDACJ,WAAarD,GAAQ,IAAD,8BAClB,cAAMA,IASVsD,aAAe,SAACC,GAAD,OACb,EAAKnD,SAAL,eACGmD,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAZhB,EAetBC,SAAW,SAACJ,GACVA,EAAMK,iBAEN,IDzBqBb,ECyBrB,EAAuC,EAAK/C,MAApC6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,SDzBNhB,EC2Bd,EAAKzC,MD1BL0C,IAAM,CACXE,OAAQ,OACRD,IAAKP,EAAS,YACdS,KAAM,CACJJ,YAAa,CACXP,MAAOO,EAAYP,MACnBY,SAAUL,EAAYK,SACtBY,sBAAuBjB,EAAYkB,0BCoBtCC,MAAK,kBAAMpB,EAAO,EAAKxC,UACvB4D,MAAK,SAACC,GAAD,OAASJ,EAAQI,EAAIhB,KAAKxD,SAC/BuE,MAAK,kBACJL,EAAS,CACPjD,QAAS,kBACTC,QCpCqB,0DDqCrBF,QAAS,eAGZuD,MAAK,kBAAMJ,EAAQM,KAAK,QACxBC,OAAM,SAACC,GACN,EAAKlE,SAAS,CAAEoC,MAAO,GAAIY,SAAU,GAAIa,qBAAsB,KAC/DJ,EAAS,CACPjD,QAAS,8BAAgC0D,EAAMzD,QAC/CA,QC5CqB,qED6CrBF,QAAS,eAjCb,EAAKL,MAAQ,CACXkC,MAAO,GACPY,SAAU,GACVa,qBAAsB,IANN,E,0CAyCtB,WACE,MAAkDzD,KAAKF,MAA/CkC,EAAR,EAAQA,MAAOY,EAAf,EAAeA,SAAUa,EAAzB,EAAyBA,qBAEzB,OACE,qBAAK9C,UAAU,MAAf,SACE,sBAAKA,UAAU,kCAAf,UACE,yCACA,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAKmD,SAArB,UACE,eAACY,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,4BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRtD,KAAK,QACLkC,KAAK,QACLC,MAAOlB,EACPsC,YAAY,cACZC,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,WAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,WACLC,MAAON,EACP7B,KAAK,WACLuD,YAAY,WACZC,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,uBAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,oCACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,uBACLC,MAAOO,EACP1C,KAAK,WACLuD,YAAY,mBACZC,SAAUvE,KAAK8C,kBAGnB,cAAC0B,EAAA,EAAD,CAAQrE,QAAQ,UAAUY,KAAK,SAA/B,gC,GAnFW3B,aA2FNqF,cAAW5B,GE3FpB6B,E,kDACJ,WAAalF,GAAQ,IAAD,8BAClB,cAAMA,IAQVsD,aAAe,SAACC,GAAD,OACb,EAAKnD,SAAL,eACGmD,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAXhB,EActByB,SAAW,SAAC5B,GACVA,EAAMK,iBAEN,MAAuC,EAAK5D,MAApC6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,QAE3BjB,EAAO,EAAKxC,OACT4D,MAAK,SAACC,GAAD,OAASJ,EAAQI,EAAIhB,KAAKxD,SAC/BuE,MAAK,kBACJL,EAAS,CACPjD,QAAS,kBACTC,QDhCqB,WCiCrBF,QAAS,eAGZuD,MAAK,kBAAMJ,EAAQM,KAAK,QACxBC,OAAM,SAACC,GACN,EAAKlE,SAAS,CAAEoC,MAAO,GAAIY,SAAU,KACrCS,EAAS,CACPjD,QAAS,8BAAgC0D,EAAMzD,QAC/CA,QDxCqB,kECyCrBF,QAAS,eA/Bb,EAAKL,MAAQ,CACXkC,MAAO,GACPY,SAAU,IALM,E,0CAuCtB,WACE,MAA4B5C,KAAKF,MAAzBkC,EAAR,EAAQA,MAAOY,EAAf,EAAeA,SAEf,OACE,qBAAKjC,UAAU,MAAf,SACE,sBAAKA,UAAU,kCAAf,UACE,yCACA,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAK2E,SAArB,UACE,eAACZ,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,4BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRtD,KAAK,QACLkC,KAAK,QACLC,MAAOlB,EACPsC,YAAY,cACZC,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,WAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,WACLC,MAAON,EACP7B,KAAK,WACLuD,YAAY,WACZC,SAAUvE,KAAK8C,kBAGnB,cAAC0B,EAAA,EAAD,CAAQrE,QAAQ,UAAUY,KAAK,SAA/B,gC,GAtEW3B,aA8ENqF,cAAWC,GCjFpBE,E,uKACJ,WACE,MAA+C5E,KAAKR,MAA5C6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASuB,EAA3B,EAA2BA,WJsBR,SAAC1F,GACtB,OAAOqD,IAAM,CACXC,IAAKP,EAAS,aACdQ,OAAQ,SACRoC,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WIzB/BC,CAFA,EAAsC9F,MAGnC+F,SAAQ,kBACP7B,EAAS,CACPjD,QAAS,0BACTC,QFVoB,kBEWpBF,QAAS,eAGZ+E,SAAQ,kBAAM5B,EAAQM,KAAK,QAC3BsB,SAAQ,kBAAML,S,oBAGnB,WACE,MAAO,O,GAjBWzF,aAqBPqF,cAAWG,GClBpBO,E,kDACJ,WAAa3F,GAAQ,IAAD,8BAClB,cAAMA,IAQVsD,aAAe,SAACC,GAAD,OACb,EAAKnD,SAAL,eACGmD,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAXhB,EActBkC,iBAAmB,SAACrC,GAClBA,EAAMK,iBAEN,MAAoC,EAAK5D,MAAjC6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASnE,EAA3B,EAA2BA,MLaC,SAACkG,EAAWlG,GACxC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,cACdQ,OAAQ,QACRoC,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,QAE/BrC,KAAM,CACJ0C,UAAW,CACTC,IAAKD,EAAUE,YACfC,IAAKH,EAAUI,iBKrBrBC,CAAe,EAAK5F,MAAOX,GACxBuE,MAAK,kBACJL,EAAS,CACPjD,QAAS,0BACTC,QH5B6B,iCG6B7BF,QAAS,eAGZuD,MAAK,kBAAMJ,EAAQM,KAAK,QACxBC,OAAM,SAACC,GACN,EAAKlE,SAAS,CAAE2F,YAAa,GAAIE,YAAa,KAC9CpC,EAAS,CACPjD,QAAS,sCAAwC0D,EAAMzD,QACvDA,QHpC6B,qEGqC7BF,QAAS,eA9Bb,EAAKL,MAAQ,CACXyF,YAAa,GACbE,YAAa,IALG,E,0CAsCtB,WACE,MAAqCzF,KAAKF,MAAlCyF,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,YAErB,OACE,qBAAK9E,UAAU,MAAf,SACE,sBAAKA,UAAU,kCAAf,UACE,iDACA,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAKoF,iBAArB,UACE,eAACrB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,cACLC,MAAOqC,EACPxE,KAAK,WACLuD,YAAY,eACZC,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,cACLC,MAAOuC,EACP1E,KAAK,WACLuD,YAAY,eACZC,SAAUvE,KAAK8C,kBAGnB,cAAC0B,EAAA,EAAD,CAAQrE,QAAQ,UAAUY,KAAK,SAA/B,gC,GArEmB3B,aA6EdqF,cAAWU,GCjDbQ,EAAY,SAACpF,EAAIpB,GAC5B,OAAOqD,IAAM,CACXC,IAAKP,EAAS,WAAa3B,EAAK,IAEhCuE,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WCjC7BY,E,kDACJ,WAAapG,GAAQ,IAAD,8BAClB,cAAMA,IAWRsD,aAAe,SAACC,GAAD,OACb,EAAKnD,SAAL,eACGmD,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAdlB,EAkBpB2C,cAAgB,SAAC9C,GAEfA,EAAMK,iBAEN,MAAoC,EAAK5D,MAAjC6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASnE,EAA3B,EAA2BA,MD5BJ,SAACwD,EAAMxD,GAChC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,WACdQ,OAAQ,OACRC,KAAM,CACJmD,MAAO,CACLC,KAAMpD,EAAKoD,KACX9C,KAAMN,EAAKM,KACX+C,QAASrD,EAAKqD,QACdC,YAAatD,EAAKsD,cAGtBnB,QAAS,CACPC,cAAe,SAAW5F,EAAK6F,UCiBjCkB,CAAY,EAAKpG,MAAOX,GACrBuE,MAAK,kBACJL,EAAS,CACPjD,QAAS,gBACTC,QL1BwB,4CK2BxBF,QAAS,eAIZuD,MAAK,SAACC,GAAD,OAASL,EAAQM,KAAK,eAC3BC,OAAM,SAACC,GACN,EAAKlE,SAAS,CACZmG,KAAM,GACN9C,KAAM,GACN+C,QAAS,GACTC,YAAa,KAEf5C,EAAS,CACPjD,QAAS,sBAAwB0D,EAAMzD,QACvCA,QLxCwB,6FKyCxBF,QAAS,eAzCf,EAAKL,MAAQ,CACXiG,KAAM,GACN9C,KAAM,GACN+C,QAAS,GACTC,YAAa,IAPG,E,0CAiDpB,WAEE,MAA6CjG,KAAKF,MAA1CiG,EAAR,EAAQA,KAAM9C,EAAd,EAAcA,KAAM+C,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,YAE7B,OACE,mCACE,qBAAKtF,UAAU,MAAMJ,GAAG,YAAxB,SACE,sBAAKI,UAAU,kCAAf,UACE,iCACE,oBAAIA,UAAU,WAAd,qFAEF,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAK6F,cAArB,UACE,eAAC9B,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uDACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAO6C,EACPzB,YAAY,WACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,0BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAOD,EACPqB,YAAY,aACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,qCACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,UACLC,MAAO8C,EACP1B,YAAY,gBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,4EACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,cACLC,MAAO+C,EACP3B,YAAY,cACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,qBAAKnC,UAAU,6BAAf,SACE,cAAC6D,EAAA,EAAD,CAAQrE,QAAQ,oBAAoBY,KAAK,SAAzC,sBAIF,cAAC,IAAD,CAAMtB,GAAI,WAAYkB,UAAU,kBAAhC,kC,GAhHYvB,aAyHXqF,cAAWmB,G,OC1HpBS,E,kDACJ,WAAa7G,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACXgG,MAAO,KACPQ,SAAS,GAJO,E,qDASpB,WAAsB,IAAD,OACnB,EAA2BtG,KAAKR,MAAxBL,EAAR,EAAQA,KAAMkE,EAAd,EAAcA,UFKY,SAAClE,GAC7B,OAAOqD,IAAM,CAGXE,OAAQ,MACRD,IAAKP,EAAS,WACd4C,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WEV/BuB,CAAepH,GACZuE,MAAK,SAAC8C,GAAD,OACJ,EAAK5G,SAAS,CACZkG,MAAOU,EAAS7D,KAAK8D,OACrBH,SAAS,OAGZ5C,MAAK,kBACJL,EAAS,CACPjD,QAAS,gBACTC,QNvBsB,gDMwBtBF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,aACTC,QN7BsB,wEM8BtBF,QAAS,gB,oBAKjB,WAGE,GAAyB,OAArBH,KAAKF,MAAMgG,MACb,MAAO,aAGL9F,KAAK8F,MAKTY,QAAQC,IAAI3G,KAAKF,MAAMgG,OACvB,IAAMc,EAAW5G,KAAKF,MAAMgG,MAAMe,KAAI,SAACf,GAAD,OACpC,+BACE,cAACgB,EAAA,EAAD,CAAMnG,UAAU,YAAYY,MAAO,CAAEwF,MAAO,OAA5C,SACE,eAACD,EAAA,EAAKE,KAAN,CAAWrG,UAAU,SAArB,UACE,cAAC,IAAD,CAAMA,UAAU,aAAalB,GAAE,kBAAaqG,EAAMvF,IAAlD,SACE,cAACuG,EAAA,EAAKG,MAAN,CAAYtG,UAAU,cAAtB,SAAqCmF,EAAM7C,SAK7C,eAAC6D,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,mBACOmF,EAAMC,QAEb,eAACe,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,sBACUmF,EAAME,WAEhB,eAACc,EAAA,EAAKK,KAAN,2BAAyBrB,EAAMG,oBAGnC,yBAlBOH,EAAMvF,OAsBjB,OACE,gCAaE,4BAAIP,KAAKF,MAAMwG,SAAW,gBAG1B,6BAAKM,EAASQ,mB,GAzFOvG,IAAMzB,WA+FpBqF,eAAW4B,GCnDXgB,GArCD,SAAC7H,GAAD,OACZ,cAAC,WAAD,UACE,cAACsH,EAAA,EAAD,CAAMvG,GAAG,eAAegB,MAAO,CAAEwF,MAAO,QAAxC,SACE,eAACD,EAAA,EAAKE,KAAN,WACE,mCACE,qBAAIrG,UAAU,WAAd,cAA2BnB,EAAMyD,QAAW,OAE9C,4CAAezD,EAAMuG,QACrB,2CAAcvG,EAAMwG,WAKpB,+CACA,cAACc,EAAA,EAAKK,KAAN,UAAY3H,EAAMyG,sBChBpBqB,G,kDACJ,WAAa9H,GAAQ,IAAD,8BAClB,cAAMA,IA0CR+H,kBAAoB,SAACxE,GACnB,MAA2C,EAAKvD,MAAxCgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,SJVR,SAAC/C,EAAIpB,GAC9B,OAAOqD,IAAM,CACXC,IAAKP,EAAS,WAAa3B,EAAK,IAChCmC,OAAQ,SACRoC,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WIM/ByC,CAAYD,EAAME,OAAOnH,GAAIpB,GAE1BuE,MAAK,kBAAMJ,EAAQM,KAAK,cACxBF,MAAK,kBACJL,EAAS,CACPjD,QAAS,6BACTC,QRnDwB,0EQoDxBF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,sBACTC,QRzDwB,oFQ0DxBF,QAAS,eAxDf,EAAKL,MAAQ,CACXgG,MAAO,CACLC,KAAM,GACN9C,KAAM,GACN+C,QAAS,GACTC,YAAa,GAGb0B,MAAO,KAXO,E,qDAiBpB,WAAsB,IAAD,OAEnB,EAAkC3H,KAAKR,MAA/BgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAErBsC,EAAU6B,EAAME,OAAOnH,GAAIpB,GAGxBuE,MAAK,SAACC,GACL,OAAO,EAAK/D,SAAS,CAAEkG,MAAOnC,EAAIhB,KAAKmD,WAExCpC,MAAK,kBACJL,EAAS,CACPjD,QAAS,qBACTC,QRlCsB,sDQmCtBF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,oBACTC,QRxCsB,+DQyCtBF,QAAS,gB,oBAkDjB,WAGE,MAAiDH,KAAKF,MAAMgG,MAApD7C,EAAR,EAAQA,KAAM8C,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,YAAa1F,EAA1C,EAA0CA,GAG1C,OACE,gCAEE,uBACA,cAAC,GAAD,CAEE0C,KAAMA,EACN8C,KAAMA,EACNC,QAASA,EACTC,YAAaA,EAMb2B,QAASrH,IAKX,uBAEEP,KAAKR,MAAML,KAAKoB,KAAOP,KAAKF,MAAMgG,MAAM6B,MACtC,cAACnD,EAAA,EAAD,CACAqD,QAAS7H,KAAKuH,kBACdpH,QAAQ,SAFR,0BAKA,GACHH,KAAKR,MAAML,KAAKoB,KAAOP,KAAKF,MAAMgG,MAAM6B,MACrC,cAAC,IAAD,CACAlI,GAAE,kBAAaO,KAAKF,MAAMgG,MAAMvF,GAA9B,SACFI,UAAU,4BAFV,kCAKA,6B,GAlIYvB,aAkLTqF,eAAW6C,ICrLpBQ,G,kDACJ,WAAatI,GAAQ,IAAD,8BAClB,cAAMA,IA4BNsD,aAAe,SAACC,GACd,IAAMgF,EAAS,eAAMhF,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,OACtD,EAAKtD,UAAS,SAAAoI,GAEZ,MAAO,CAAElC,MAAM,2BAAMkC,EAAUlC,OAAUiC,QAjC3B,EAsClBE,cAAgB,SAAClF,GAEfA,EAAMK,iBAEN,MAA2C,EAAK5D,MAAxCL,EAAR,EAAQA,KAAMkE,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,QAASkE,EAAjC,EAAiCA,OLMZ,SAAC7E,EAAMpC,EAAIpB,GACpC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,WAAa3B,EAAK,IAChCmC,OAAQ,QACRC,KAAM,CACJmD,MAAO,CACLC,KAAMpD,EAAKoD,KACX9C,KAAMN,EAAKM,KACX+C,QAASrD,EAAKqD,QACdC,YAAatD,EAAKsD,cAGtBnB,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WKjB7BkD,CAAY,EAAKpI,MAAMgG,MAAO0B,EAAME,OAAOnH,GAAIpB,GAC5CuE,MAAK,kBAAML,EAAS,CACnBjD,QAAS,gBACTC,QT1CwB,sDS2CxBF,QAAS,eAEVuD,MAAK,SAAAC,GAAG,OAAIL,EAAQM,KAAK,cACzBC,OAAM,WACLR,EAAS,CACPjD,QAAS,sBACTC,QThDsB,4ESiDtBF,QAAS,eApDjB,EAAKL,MAAQ,CACXgG,MAAO,CACLC,KAAM,GACN9C,KAAM,GACN+C,QAAS,GACTC,YAAa,KARC,E,qDAcpB,WAAsB,IAAD,OAEnB,EAAkCjG,KAAKR,MAA/BgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAErBsC,EAAU6B,EAAME,OAAOnH,GAAIpB,GAExBuE,MAAK,SAAAC,GAAG,OAAI,EAAK/D,SAAS,CAAEkG,MAAOnC,EAAIhB,KAAKmD,WAC5CjC,OAAM,SAAAsE,GAAG,OAAI9E,EAAS,CACrBjD,QAAS,oBACTC,QAAS,yBAA2B8H,EAAI9H,QACxCF,QAAS,gB,oBAoCb,WAEE,MAA6CH,KAAKF,MAAMgG,MAAhDC,EAAR,EAAQA,KAAM9C,EAAd,EAAcA,KAAM+C,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,YAE7B,OACE,mCACE,qBAAKtF,UAAU,MAAMJ,GAAG,YAAxB,SACE,sBAAKI,UAAU,kCAAf,UACE,oBAAIA,UAAU,WAAd,6BACA,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAKiI,cAArB,UACE,eAAClE,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,0BACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAOD,EACPsB,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,wBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAO6C,EACPxB,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,UACLC,MAAO8C,EACPzB,SAAUvE,KAAK8C,kBAGnB,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,cACLC,MAAO+C,EACP3B,YAAY,cACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,qBAAKnC,UAAU,6BAAf,SACE,cAAC6D,EAAA,EAAD,CAAQrE,QAAQ,UAAUY,KAAK,SAA/B,yBAIF,cAAC,IAAD,CAAMtB,GAAI,WAAYkB,UAAU,kBAAhC,kC,GAnHUvB,aA4HXqF,eAAWqD,IC3FbM,GAAgB,SAAC7H,EAAIpB,GAChC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,eAAiB3B,EAAK,IAEpCuE,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WCtC7BqD,G,kDACJ,WAAa7I,GAAQ,IAAD,8BAClB,cAAMA,IAiBRsD,aAAe,SAACC,GAAD,OACb,EAAKnD,SAAL,eACGmD,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SApBlB,EAwBpBoF,kBAAoB,SAACvF,GAEnBA,EAAMK,iBAEN,MAAoC,EAAK5D,MAAjC6D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASnE,EAA3B,EAA2BA,MDnCA,SAACwD,EAAMxD,GACpC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,eACdQ,OAAQ,OACRC,KAAM,CACJ4F,UAAW,CACTxC,KAAMpD,EAAKoD,KACX9C,KAAMN,EAAKM,KACXuF,MAAO7F,EAAK6F,MACZC,KAAM9F,EAAK8F,KACXC,WAAY/F,EAAK+F,WACjBC,WAAYhG,EAAKgG,WACjB1C,YAAatD,EAAKsD,YAClB2C,UAAWjG,EAAKiG,UAChBC,MAAOlG,EAAKkG,MACZC,UAAWnG,EAAKmG,YAGpBhE,QAAS,CACPC,cAAe,SAAW5F,EAAK6F,UCkBjC+D,CAAgB,EAAKjJ,MAAOX,GACzBuE,MAAK,kBACJL,EAAS,CACPjD,QAAS,oBACTC,QXtB4B,uDWuB5BF,QAAS,eAIZuD,MAAK,SAACC,GAAD,OAASL,EAAQM,KAAK,mBAC3BC,OAAM,SAACC,GAONT,EAAS,CACPjD,QAAS,sBAAwB0D,EAAMzD,QACvCA,QXpC4B,0GWqC5BF,QAAS,eA/Cf,EAAKL,MAAQ,CACXiG,KAAM,GACN9C,KAAM,GACNuF,MAAO,GACPC,KAAM,GACNC,WAAY,GACZC,WAAY,GACZ1C,YAAa,GACb2C,UAAW,GACXC,MAAO,GACPC,UAAW,IAbK,E,0CAuDpB,WAEE,MAAsG9I,KAAKF,MAAnGiG,EAAR,EAAQA,KAAM9C,EAAd,EAAcA,KAAMuF,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAAMC,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,WAAY1C,EAAzD,EAAyDA,YAAa2C,EAAtE,EAAsEA,UAAWC,EAAjF,EAAiFA,MAAOC,EAAxF,EAAwFA,UAExF,OACE,mCACE,qBAAKnI,UAAU,MAAMJ,GAAG,gBAAxB,SACE,sBAAKI,UAAU,kCAAf,UACE,iCACE,oBAAIA,UAAU,WAAd,uEAEF,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAKsI,kBAArB,UACE,eAACvE,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,sEACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAO6C,EACPzB,YAAY,WACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,iDACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAOD,EACPqB,YAAY,iBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,+DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,QACLC,MAAOsF,EACPzH,KAAK,SACLuD,YAAY,kBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,8DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,OACLC,MAAOuF,EACPnE,YAAY,iBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,0DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,aACLC,MAAOwF,EACPpE,YAAY,kBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,qFACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,aACLC,MAAOyF,EACPrE,YAAY,uBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,8EACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,cACLC,MAAO+C,EACP3B,YAAY,cACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,kEACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,YACLC,MAAO0F,EACPtE,YAAY,sBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,sGACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,QACLC,MAAO2F,EACPvE,YAAY,8BACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uEACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,YACLC,MAAO4F,EACPxE,YAAY,sBACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,qBAAKnC,UAAU,6BAAf,SACE,cAAC6D,EAAA,EAAD,CAAQrE,QAAQ,oBAAoBY,KAAK,SAAzC,8BAIF,cAAC,IAAD,CAAMtB,GAAI,WAAYkB,UAAU,kBAAhC,kC,GArLgBvB,aA8LfqF,eAAW4D,IC/LpBW,G,kDACJ,WAAaxJ,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACXyI,UAAW,KACXjC,SAAS,GAJO,E,qDASpB,WAAsB,IAAD,OACnB,EAA2BtG,KAAKR,MAAxBL,EAAR,EAAQA,KAAMkE,EAAd,EAAcA,UFUgB,SAAClE,GACjC,OAAOqD,IAAM,CAGXE,OAAQ,MACRD,IAAKP,EAAS,eACd4C,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WEf/BiE,CAAmB9J,GAChBuE,MAAK,SAAC8C,GAAD,OACJ,EAAK5G,SAAS,CACZ2I,UAAW/B,EAAS7D,KAAKuG,WACzB5C,SAAS,OAGZ5C,MAAK,kBACJL,EAAS,CACPjD,QAAS,gBACTC,QZb+B,gEYc/BF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,aACTC,QZnB+B,kFYoB/BF,QAAS,gB,oBAKjB,WAGE,GAA6B,OAAzBH,KAAKF,MAAMyI,UACb,MAAO,aAUT,IAAMY,EAAenJ,KAAKF,MAAMyI,UAAU1B,KAAI,SAAC0B,GAAD,OAC5C,+BAaE,cAACzB,EAAA,EAAD,CAAMnG,UAAU,gBAAgBY,MAAO,CAAEwF,MAAO,OAAhD,SACE,eAACD,EAAA,EAAKE,KAAN,CAAWrG,UAAU,SAArB,UACE,cAAC,IAAD,CAAMA,UAAU,aAAalB,GAAE,sBAAiB8I,EAAUhI,IAA1D,SACE,cAACuG,EAAA,EAAKG,MAAN,CAAYtG,UAAU,kBAAtB,SAAyC4H,EAAUtF,SAKrD,eAAC6D,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,mBACO4H,EAAUxC,QAEjB,eAACe,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,qBACS4H,EAAUC,SAEnB,eAAC1B,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,mBACO4H,EAAUE,QAEjB,eAAC3B,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,qBACS4H,EAAUG,cAEnB,eAAC5B,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,yBACa4H,EAAUI,cAEvB,eAAC7B,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,qCACyB4H,EAAUK,aAEnC,eAAC9B,EAAA,EAAKI,SAAN,CAAevG,UAAU,kBAAzB,iCACqB4H,EAAUM,SAE/B,eAAC/B,EAAA,EAAKK,KAAN,2BAAyBoB,EAAUtC,eACnC,eAACa,EAAA,EAAKK,KAAN,yBAAuBoB,EAAUO,kBAGrC,yBA9COP,EAAUhI,OAkDrB,OACE,gCAaE,4BAAIP,KAAKF,MAAMwG,SAAW,gBAG1B,6BAAK6C,EAAa/B,mB,GAtHOvG,IAAMzB,WA4HxBqF,eAAWuE,IC1EXI,GA5CG,SAAC5J,GAAD,OAChB,cAAC,WAAD,UACE,cAACsH,EAAA,EAAD,CAAMvG,GAAG,mBAAmBgB,MAAO,CAAEwF,MAAO,QAA5C,SACE,eAACD,EAAA,EAAKE,KAAN,WACE,mCACE,qBAAIrG,UAAU,WAAd,cAA2BnB,EAAMyD,QAAW,OAM9C,4CAAezD,EAAMuG,QACrB,yCAAYvG,EAAMgJ,SAClB,wCAAWhJ,EAAMiJ,QACjB,yCAAYjJ,EAAMkJ,cAClB,8CAAiBlJ,EAAMmJ,cACvB,6CAAgBnJ,EAAMoJ,aACtB,yCAAYpJ,EAAMqJ,SAClB,+CACA,cAAC/B,EAAA,EAAKK,KAAN,UAAY3H,EAAMyG,cAClB,6CACA,cAACa,EAAA,EAAKK,KAAN,UAAY3H,EAAMsJ,oBCvBpBO,G,kDACJ,WAAa7J,GAAQ,IAAD,8BAClB,cAAMA,IA6CR8J,sBAAwB,SAACvG,GACvB,MAA2C,EAAKvD,MAAxCgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,SJPJ,SAAC/C,EAAIpB,GAClC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,eAAiB3B,EAAK,IACpCmC,OAAQ,SACRoC,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WIG/BuE,CAAgB/B,EAAME,OAAOnH,GAAIpB,GAE9BuE,MAAK,kBAAMJ,EAAQM,KAAK,kBACxBF,MAAK,kBACJL,EAAS,CACPjD,QAAS,iCACTC,Qd3C4B,6Dc4C5BF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,0BACTC,QdjD4B,6EckD5BF,QAAS,eA3Df,EAAKL,MAAQ,CACXyI,UAAW,CACTxC,KAAM,GACN9C,KAAM,GACNuF,MAAO,GACPC,KAAM,GACNC,WAAY,GACZC,WAAY,GACZ1C,YAAa,GACb2C,UAAW,GACXC,MAAO,GACPC,UAAW,KAdG,E,qDAoBpB,WAAsB,IAAD,OAEnB,EAAkC9I,KAAKR,MAA/BgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAErB+E,GAAcZ,EAAME,OAAOnH,GAAIpB,GAG5BuE,MAAK,SAACC,GACL,OAAO,EAAK/D,SAAS,CAAE2I,UAAW5E,EAAIhB,KAAK4F,eAE5C7E,MAAK,kBACJL,EAAS,CACPjD,QAAS,yBACTC,Qd1B0B,0Dc2B1BF,QAAS,eAGZ0D,OAAM,kBACLR,EAAS,CACPjD,QAAS,wBACTC,QdhC0B,mEciC1BF,QAAS,gB,oBAkDjB,WAGE,MAAsGH,KAAKF,MAAMyI,UAAzGxC,EAAR,EAAQA,KAAM9C,EAAd,EAAcA,KAAMuF,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAAMC,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,WAAY1C,EAAzD,EAAyDA,YAAa2C,EAAtE,EAAsEA,UAAWC,EAAjF,EAAiFA,MAAOC,EAAxF,EAAwFA,UAGxF,OACE,gCAEE,uBACA,cAAC,GAAD,CAEE7F,KAAMA,EACN8C,KAAMA,EACNyC,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZC,WAAYA,EACZC,UAAWA,EACXC,MAAOA,EACP5C,YAAaA,EACb6C,UAAWA,IAEb,uBAEE9I,KAAKR,MAAML,KAAKoB,KAAOP,KAAKF,MAAMyI,UAAUZ,MAC1C,cAACnD,EAAA,EAAD,CACAqD,QAAS7H,KAAKsJ,sBACdnJ,QAAQ,SAFR,+BAKA,GACHH,KAAKR,MAAML,KAAKoB,KAAOP,KAAKF,MAAMyI,UAAUZ,MACzC,cAAC,IAAD,CACAlI,GAAE,sBAAiBO,KAAKF,MAAMyI,UAAUhI,GAAtC,SACFI,UAAU,4BAFV,oCAKA,6B,GAlIgBvB,aAkLbqF,eAAW4E,ICrLpBG,G,kDACJ,WAAahK,GAAQ,IAAD,8BAClB,cAAMA,IAkCNsD,aAAe,SAACC,GACd,IAAMgF,EAAS,eAAMhF,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,OACtD,EAAKtD,UAAS,SAAAoI,GAEZ,MAAO,CAAEO,UAAU,2BAAMP,EAAUO,WAAcR,QAvCnC,EA4ClB0B,kBAAoB,SAAC1G,GAEnBA,EAAMK,iBAEN,MAA2C,EAAK5D,MAAxCL,EAAR,EAAQA,KAAMkE,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,QAASkE,EAAjC,EAAiCA,OLMR,SAAC7E,EAAMpC,EAAIpB,GACxC,OAAOqD,IAAM,CACXC,IAAKP,EAAS,eAAiB3B,EAAK,IACpCmC,OAAQ,QACRC,KAAM,CACJ4F,UAAW,CACTxC,KAAMpD,EAAKoD,KACX9C,KAAMN,EAAKM,KACXuF,MAAO7F,EAAK6F,MACZC,KAAM9F,EAAK8F,KACXC,WAAY/F,EAAK+F,WACjBC,WAAYhG,EAAKgG,WACjB1C,YAAatD,EAAKsD,YAClB2C,UAAWjG,EAAKiG,UAChBC,MAAOlG,EAAKkG,MACZC,UAAWnG,EAAKmG,YAGpBhE,QAAS,CACPC,cAAc,SAAD,OAAW5F,EAAK6F,WKvB7B0E,CAAgB,EAAK5J,MAAMyI,UAAWf,EAAME,OAAOnH,GAAIpB,GACpDuE,MAAK,kBAAML,EAAS,CACnBjD,QAAS,oBACTC,QfrC4B,iDesC5BF,QAAS,eAEVuD,MAAK,SAAAC,GAAG,OAAIL,EAAQM,KAAK,kBACzBC,OAAM,WACLR,EAAS,CACPjD,QAAS,0BACTC,Qf3C0B,0Ge4C1BF,QAAS,eA1DjB,EAAKL,MAAQ,CACXyI,UAAW,CACTxC,KAAM,GACN9C,KAAM,GACNuF,MAAO,GACPC,KAAM,GACNC,WAAY,GACZC,WAAY,GACZ1C,YAAa,GACb2C,UAAW,GACXC,MAAO,GACPC,UAAW,KAdG,E,qDAoBpB,WAAsB,IAAD,OAEnB,EAAkC9I,KAAKR,MAA/BgI,EAAR,EAAQA,MAAOrI,EAAf,EAAeA,KAAMkE,EAArB,EAAqBA,SAErB+E,GAAcZ,EAAME,OAAOnH,GAAIpB,GAE5BuE,MAAK,SAAAC,GAAG,OAAI,EAAK/D,SAAS,CAAE2I,UAAW5E,EAAIhB,KAAK4F,eAChD1E,OAAM,SAAAsE,GAAG,OAAI9E,EAAS,CACrBjD,QAAS,wBACTC,QAAS,yBAA2B8H,EAAI9H,QACxCF,QAAS,gB,oBAoCb,WAEE,MAAsGH,KAAKF,MAAMyI,UAAzGxC,EAAR,EAAQA,KAAM9C,EAAd,EAAcA,KAAMuF,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAAMC,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,WAAY1C,EAAzD,EAAyDA,YAAa2C,EAAtE,EAAsEA,UAAWC,EAAjF,EAAiFA,MAAOC,EAAxF,EAAwFA,UAExF,OACE,mCACE,qBAAKnI,UAAU,MAAMJ,GAAG,gBAAxB,SACE,sBAAKI,UAAU,kCAAf,UACE,iCACE,oBAAIA,UAAU,WAAd,uEAEF,eAACoD,EAAA,EAAD,CAAMC,SAAUhE,KAAKyJ,kBAArB,UACE,eAAC1F,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,sEACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAO6C,EACPzB,YAAY,WACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,iDACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,OACLC,MAAOD,EACPqB,YAAY,iBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,+DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,QACLC,MAAOsF,EACPlE,YAAY,kBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,8DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,OACLC,MAAOuF,EACPnE,YAAY,iBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,0DACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,aACLC,MAAOwF,EACPpE,YAAY,kBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,qFACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,aACLC,MAAOyF,EACPrE,YAAY,uBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,8EACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,UAAQ,EACRpB,KAAK,cACLC,MAAO+C,EACP3B,YAAY,cACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,kEACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,YACLC,MAAO0F,EACPtE,YAAY,sBACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,sGACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,QACLC,MAAO2F,EACPvE,YAAY,8BACZC,SAAUvE,KAAK8C,kBAGnB,uBACA,eAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,uEACA,cAACJ,EAAA,EAAKK,QAAN,CACEnB,KAAK,YACLC,MAAO4F,EACPxE,YAAY,sBACZ6B,GAAG,WACHC,KAAM,EACN7B,SAAUvE,KAAK8C,kBAGnB,uBACA,qBAAKnC,UAAU,6BAAf,SACE,cAAC6D,EAAA,EAAD,CAAQrE,QAAQ,oBAAoBY,KAAK,SAAzC,8BAIF,cAAC,IAAD,CAAMtB,GAAI,WAAYkB,UAAU,kBAAhC,kC,GA/LcvB,aAwMfqF,eAAW+E,ICxCXG,G,kDAhJb,WAAanK,GAAQ,IAAD,8BAClB,cAAMA,IAOR+D,QAAU,SAACpE,GAAD,OAAU,EAAKS,SAAS,CAAET,UARhB,EAUpB0F,UAAY,kBAAM,EAAKjF,SAAS,CAAET,KAAM,QAVpB,EAYpBmB,YAAc,SAACC,GACb,EAAKX,UAAS,SAACE,GACb,MAAO,CAAE8J,UAAW9J,EAAM8J,UAAUC,QAAO,SAACC,GAAD,OAASA,EAAIvJ,KAAOA,UAd/C,EAkBpB8C,SAAW,YAAoC,IAAjCjD,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASF,EAAc,EAAdA,QACxBI,EAAKwJ,cACX,EAAKnK,UAAS,SAACE,GACb,MAAO,CACL8J,UAAU,GAAD,mBAAM9J,EAAM8J,WAAZ,CAAuB,CAAExJ,UAASC,UAASF,UAASI,aApBjE,EAAKT,MAAQ,CACXX,KAAM,KACNyK,UAAW,IAJK,E,0CA2BpB,WAAW,IAAD,OACR,EAA4B5J,KAAKF,MAAzB8J,EAAR,EAAQA,UAAWzK,EAAnB,EAAmBA,KAEnB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAQA,KAAMA,IACbyK,EAAU/C,KAAI,SAACxD,GAAD,OACb,cAAC,EAAD,CAEEjD,QAASiD,EAASjD,QAClBD,QAASkD,EAASlD,QAClBE,QAASgD,EAAShD,QAClBE,GAAI8C,EAAS9C,GACbD,YAAa,EAAKA,aALb+C,EAAS9C,OAQlB,sCAMA,cAAC,EAAD,CAAQpB,KAAMA,IACd,uBAAMwB,UAAU,YAAhB,UAEE,cAAC,IAAD,CACEqJ,KAAK,YACL1K,OAAQ,kBACN,cAAC,EAAD,CAAQ+D,SAAU,EAAKA,SAAUE,QAAS,EAAKA,aAGnD,cAAC,IAAD,CACEyG,KAAK,YACL1K,OAAQ,kBACN,cAAC,EAAD,CAAQ+D,SAAU,EAAKA,SAAUE,QAAS,EAAKA,aAGnD,cAAC,EAAD,CACEpE,KAAMA,EACN6K,KAAK,aACL1K,OAAQ,kBACN,cAAC,EAAD,CACE+D,SAAU,EAAKA,SACfwB,UAAW,EAAKA,UAChB1F,KAAMA,OAIZ,cAAC,EAAD,CACEA,KAAMA,EACN6K,KAAK,cACL1K,OAAQ,kBACN,cAAC,EAAD,CAAgB+D,SAAU,EAAKA,SAAUlE,KAAMA,OAInD,cAAC,EAAD,CACEA,KAAMA,EACN8K,OAAK,EACLD,KAAK,WACL1K,OAAQ,kBACN,cAAC,GAAD,CAAgB+D,SAAU,EAAKA,SAAUlE,KAAMA,OAGnD,cAAC,EAAD,CACEA,KAAMA,EACN8K,OAAK,EACLD,KAAK,cACL1K,OAAQ,kBAAM,cAAC,GAAD,CAAW+D,SAAU,EAAKA,SAAUlE,KAAMA,OAE1D,cAAC,EAAD,CACEA,KAAMA,EACN6K,KAAK,iBACL1K,OAAQ,kBAAM,cAAC,EAAD,CAAa+D,SAAU,EAAKA,SAAUlE,KAAMA,OAE5D,cAAC,EAAD,CACEA,KAAMA,EACN6K,KAAK,mBACL1K,OAAQ,kBAAM,cAAC,GAAD,CAAa+D,SAAU,EAAKA,SAAUlE,KAAMA,OAG5D,cAAC,EAAD,CACEA,KAAMA,EACN6K,KAAK,qBACL1K,OAAQ,kBACN,cAAC,GAAD,CAAiB+D,SAAU,EAAKA,SAAUlE,KAAMA,OAGpD,cAAC,EAAD,CACEA,KAAMA,EACN8K,OAAK,EACLD,KAAK,eACL1K,OAAQ,kBACN,cAAC,GAAD,CAAoB+D,SAAU,EAAKA,SAAUlE,KAAMA,OAGvD,cAAC,EAAD,CACEA,KAAMA,EACN8K,OAAK,EACLD,KAAK,kBACL1K,OAAQ,kBACN,cAAC,GAAD,CAAe+D,SAAU,EAAKA,SAAUlE,KAAMA,OAGlD,cAAC,EAAD,CACEA,KAAMA,EACN6K,KAAK,uBACL1K,OAAQ,kBACN,cAAC,GAAD,CAAiB+D,SAAU,EAAKA,SAAUlE,KAAMA,iB,GAxI5CC,aClBZ8K,GACJ,cAAC,IAAD,CAAeC,SAAUC,oBAAzB,SACE,cAAC,GAAD,MAIJC,IAAS/K,OAAO4K,GAAQI,SAASC,eAAe,U","file":"static/js/main.1a805e87.chunk.js","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\n// props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return <Route {...rest} render={render} />\n\n    // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return (\n      <Route\n        {...rest}\n        render={(props) =>\n          user ? <Component {...props} /> : <Redirect to='/' />\n        }\n      />\n    )\n  }\n}\n\nexport default AuthenticatedRoute\n","import React from 'react'\nimport Alert from 'react-bootstrap/Alert'\n\nimport './AutoDismissAlert.scss'\n\nclass AutoDismissAlert extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      show: true\n    }\n    this.timeoutId = null\n  }\n\n  componentDidMount () {\n    this.timeoutId = setTimeout(this.handleClose, 5000)\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this.timeoutId)\n  }\n\nhandleClose = () => this.setState({ show: false })\n\nrender () {\n  const { variant, heading, message, deleteAlert, id } = this.props\n\n  // Delete this alert after the fade animation time (300 ms by default)\n  if (!this.state.show) {\n    setTimeout(() => {\n      deleteAlert(id)\n    }, 300)\n  }\n\n  return (\n    <Alert\n      dismissible\n      show={this.state.show}\n      variant={variant}\n      onClose={this.handleClose}>\n      <div className='container'>\n        <Alert.Heading>{heading}</Alert.Heading>\n        <p className='alert-body'>{message}</p>\n      </div>\n    </Alert>\n  )\n}\n}\n\nexport default AutoDismissAlert\n","import React, { Fragment } from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport { Link, NavLink } from 'react-router-dom'\nimport './HeaderFooter.scss'\n\nconst authenticatedOptions = (\n  <Fragment>\n    {/* <NavLink to='/change-pw/' className='nav-link'>Change Password</NavLink>\n    <NavLink to='/sign-out' className='nav-link'>Sign Out</NavLink> */}\n    <NavLink to='/create-world/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='create-btn'>\n        Ignite a World\n      </button>\n    </NavLink>\n    <NavLink to='/worlds/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='index-btn'>\n        Scry Known Worlds\n      </button>\n    </NavLink>\n    <NavLink to='/create-character/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='create-char-btn'>\n        Sculpt a Character\n      </button>\n    </NavLink>\n    <NavLink to='/characters/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='index-btn'>\n        Summon Loyal Adventurers\n      </button>\n    </NavLink>\n  </Fragment>\n)\n\nconst unauthenticatedOptions = (\n  <Fragment>\n    <NavLink to='/sign-up' className='nav-link'>Sign Up</NavLink>\n    <NavLink to='/sign-in' className='nav-link'>Sign In</NavLink>\n  </Fragment>\n)\n\nconst alwaysOptions = (\n  <Fragment>\n  </Fragment>\n)\n\nconst Header = ({ user }) => (\n  <Navbar bg='dark' variant='dark' expand='md'>\n    <Navbar.Brand>\n      <Link to='/' style={{ color: '#ffffff', textDecoration: 'none' }}>RPGenerator</Link>\n    </Navbar.Brand>\n    <Navbar.Toggle aria-controls='basic-navbar-nav' />\n    <Navbar.Collapse id='basic-navbar-nav'>\n      <Nav className='ml-auto'>\n        {/* {user && (\n          <span className='navbar-text mr-2'>Welcome, {user.email}</span>\n        )} */}\n        {alwaysOptions}\n        {user ? authenticatedOptions : unauthenticatedOptions}\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n)\n\nexport default Header\n","import React, { Fragment } from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n// removed Link import below\nimport { NavLink } from 'react-router-dom'\nimport '../Header/HeaderFooter.scss'\n\nconst authenticatedOptions = (\n  <Fragment>\n    <NavLink to='/change-pw/' className='nav-link'>Change Password</NavLink>\n    <NavLink to='/sign-out' className='nav-link'>Sign Out</NavLink>\n    {/* <NavLink to='/create-world/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='create-btn'>\n        Ignite a World\n      </button>\n    </NavLink>\n    <NavLink to='/worlds/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='index-btn'>\n        Scry Known Worlds\n      </button>\n    </NavLink>\n    <NavLink to='/create-character/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='create-char-btn'>\n        Sculpt a Character\n      </button>\n    </NavLink>\n    <NavLink to='/characters/'>\n      <button\n        type='button'\n        className='btn btn-secondary btn-lg'\n        id='index-btn'>\n        Summon Loyal Adventurers\n      </button>\n    </NavLink> */}\n  </Fragment>\n)\n\nconst unauthenticatedOptions = (\n  <Fragment>\n    {/* <NavLink to='/sign-up' className='nav-link'>Sign Up</NavLink>\n    <NavLink to='/sign-in' className='nav-link'>Sign In</NavLink> */}\n  </Fragment>\n)\n\nconst alwaysOptions = (\n  <Fragment>\n  </Fragment>\n)\n\nconst Footer = ({ user }) => (\n  <Navbar bg='dark' variant='dark' expand='md' fixed='bottom'>\n    <Navbar.Brand>\n      {/* <Link to='/' style={{ color: '#FFF', textDecoration: 'none' }}></Link> */}\n    </Navbar.Brand>\n    <Navbar.Toggle aria-controls='basic-navbar-nav' />\n    <Navbar.Collapse id='basic-navbar-nav'>\n      <Nav className='ml-auto'>\n        {user && (\n          <span className='navbar-text mr-2'>Welcome, {user.email}</span>\n        )}\n        {alwaysOptions}\n        {user ? authenticatedOptions : unauthenticatedOptions}\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n)\n\nexport default Footer\n","let apiUrl\nconst apiUrls = {\n  production: 'https://rpg-forum-django.herokuapp.com',\n  development: 'http://localhost:8000'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","import apiUrl from '../apiConfig'\nimport axios from 'axios'\n\nexport const signUp = (credentials) => {\n  return axios({\n    method: 'POST',\n    url: apiUrl + '/sign-up/',\n    data: {\n      credentials: {\n        email: credentials.email,\n        password: credentials.password,\n        password_confirmation: credentials.passwordConfirmation\n      }\n    }\n  })\n}\n\nexport const signIn = (credentials) => {\n  return axios({\n    url: apiUrl + '/sign-in/',\n    method: 'POST',\n    data: {\n      credentials: {\n        email: credentials.email,\n        password: credentials.password\n      }\n    }\n  })\n}\n\nexport const signOut = (user) => {\n  return axios({\n    url: apiUrl + '/sign-out/',\n    method: 'DELETE',\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\nexport const changePassword = (passwords, user) => {\n  return axios({\n    url: apiUrl + '/change-pw/',\n    method: 'PATCH',\n    headers: {\n      Authorization: `Token ${user.token}`\n    },\n    data: {\n      passwords: {\n        old: passwords.oldPassword,\n        new: passwords.newPassword\n      }\n    }\n  })\n}\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { signUp, signIn } from '../../api/auth'\nimport { signUpSuccess, signUpFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nclass SignUp extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      email: '',\n      password: '',\n      passwordConfirmation: ''\n    }\n  }\n\nhandleChange = (event) =>\n  this.setState({\n    [event.target.name]: event.target.value\n  })\n\nonSignUp = (event) => {\n  event.preventDefault()\n\n  const { msgAlert, history, setUser } = this.props\n\n  signUp(this.state)\n    .then(() => signIn(this.state))\n    .then((res) => setUser(res.data.user))\n    .then(() =>\n      msgAlert({\n        heading: 'Sign Up Success',\n        message: signUpSuccess,\n        variant: 'success'\n      })\n    )\n    .then(() => history.push('/'))\n    .catch((error) => {\n      this.setState({ email: '', password: '', passwordConfirmation: '' })\n      msgAlert({\n        heading: 'Sign Up Failed with error: ' + error.message,\n        message: signUpFailure,\n        variant: 'danger'\n      })\n    })\n}\n\nrender () {\n  const { email, password, passwordConfirmation } = this.state\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Sign Up</h3>\n        <Form onSubmit={this.onSignUp}>\n          <Form.Group controlId='email'>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              required\n              type='email'\n              name='email'\n              value={email}\n              placeholder='Enter email'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Form.Group controlId='password'>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              required\n              name='password'\n              value={password}\n              type='password'\n              placeholder='Password'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Form.Group controlId='passwordConfirmation'>\n            <Form.Label>Password Confirmation</Form.Label>\n            <Form.Control\n              required\n              name='passwordConfirmation'\n              value={passwordConfirmation}\n              type='password'\n              placeholder='Confirm Password'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>Submit</Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default withRouter(SignUp)\n","export const signUpSuccess = 'Successfully registered! You\\'ve been signed in as well.'\nexport const signUpFailure = 'Registration failed. Email may be taken, or passwords don\\'t match.'\nexport const signInSuccess = 'Welcome!'\nexport const signInFailure = 'Failed to sign in. Check your email and password and try again.'\nexport const signOutSuccess = 'Come back soon!'\nexport const changePasswordSuccess = 'Password changed successfully!'\nexport const changePasswordFailure = 'Failed to change passwords. Check your old password and try again.'\n// world messages\nexport const showIndexSuccess = 'You have conjured a list of all known Worlds.'\nexport const showIndexFailure = 'An error in your scrying spells clouds your view of the known Worlds.'\nexport const showWorldSuccess = 'You have conjured the visage of your desired World.'\nexport const showWorldFailure = 'You were unable to conjure the visage of your desired world.'\nexport const createWorldSuccess = 'The spark of your World has been ignited!'\nexport const createWorldFailure = 'Your spells failed to ignite the spark of your World! Don\\'t give up...give it another try!'\nexport const deleteWorldSuccess = 'This World has been removed from this plane of existence...a cruel fate'\nexport const deleteWorldFailure = 'The Heroes of this World have found a way to foil your plans...dare to try again?'\nexport const updateWorldSuccess = 'This World has been molded and shaped by your whims'\nexport const updateWorldFailure = 'The people of this World have a strong will...you will need to try again.'\n// character messages\nexport const showCharacterIndexSuccess = 'You have summoned your loyal Adventurers to kneel before you.'\nexport const showCharacterIndexFailure = 'Your Adventurers are caught up in their quests. They fail to heed your summons.'\nexport const showCharacterSuccess = 'You have conjured the visage of your desired Character.'\nexport const showCharacterFailure = 'You were unable to conjure the visage of your desired Character.'\nexport const createCharacterSuccess = 'The Character has been molded in your desired image!'\nexport const createCharacterFailure = 'This clay is stubborn! You were unable to mold it to your desires. Don\\'t give up...give it another try!'\nexport const deleteCharacterSuccess = 'This Character has been crushed like an ant...a cruel fate'\nexport const deleteCharacterFailure = 'This Character has eluded your attempts to crush them...dare to try again?'\nexport const updateCharacterSuccess = 'This Character has been reshaped by your whims'\nexport const updateCharacterFailure = 'This Character has a strong will and resisted your attempt to change them...you will need to try again.'\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { signIn } from '../../api/auth'\nimport { signInSuccess, signInFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nclass SignIn extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\nhandleChange = (event) =>\n  this.setState({\n    [event.target.name]: event.target.value\n  })\n\nonSignIn = (event) => {\n  event.preventDefault()\n\n  const { msgAlert, history, setUser } = this.props\n\n  signIn(this.state)\n    .then((res) => setUser(res.data.user))\n    .then(() =>\n      msgAlert({\n        heading: 'Sign In Success',\n        message: signInSuccess,\n        variant: 'success'\n      })\n    )\n    .then(() => history.push('/'))\n    .catch((error) => {\n      this.setState({ email: '', password: '' })\n      msgAlert({\n        heading: 'Sign In Failed with error: ' + error.message,\n        message: signInFailure,\n        variant: 'danger'\n      })\n    })\n}\n\nrender () {\n  const { email, password } = this.state\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Sign In</h3>\n        <Form onSubmit={this.onSignIn}>\n          <Form.Group controlId='email'>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              required\n              type='email'\n              name='email'\n              value={email}\n              placeholder='Enter email'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Form.Group controlId='password'>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              required\n              name='password'\n              value={password}\n              type='password'\n              placeholder='Password'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>Submit</Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default withRouter(SignIn)\n","import { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { signOut } from '../../api/auth'\nimport { signOutSuccess } from '../AutoDismissAlert/messages'\n\nclass SignOut extends Component {\n  componentDidMount () {\n    const { msgAlert, history, clearUser, user } = this.props\n\n    signOut(user)\n      .finally(() =>\n        msgAlert({\n          heading: 'Signed Out Successfully',\n          message: signOutSuccess,\n          variant: 'success'\n        })\n      )\n      .finally(() => history.push('/'))\n      .finally(() => clearUser())\n  }\n\n  render () {\n    return ''\n  }\n}\n\nexport default withRouter(SignOut)\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { changePassword } from '../../api/auth'\nimport { changePasswordSuccess, changePasswordFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nclass ChangePassword extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      oldPassword: '',\n      newPassword: ''\n    }\n  }\n\nhandleChange = (event) =>\n  this.setState({\n    [event.target.name]: event.target.value\n  })\n\nonChangePassword = (event) => {\n  event.preventDefault()\n\n  const { msgAlert, history, user } = this.props\n\n  changePassword(this.state, user)\n    .then(() =>\n      msgAlert({\n        heading: 'Change Password Success',\n        message: changePasswordSuccess,\n        variant: 'success'\n      })\n    )\n    .then(() => history.push('/'))\n    .catch((error) => {\n      this.setState({ oldPassword: '', newPassword: '' })\n      msgAlert({\n        heading: 'Change Password Failed with error: ' + error.message,\n        message: changePasswordFailure,\n        variant: 'danger'\n      })\n    })\n}\n\nrender () {\n  const { oldPassword, newPassword } = this.state\n\n  return (\n    <div className='row'>\n      <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n        <h3>Change Password</h3>\n        <Form onSubmit={this.onChangePassword}>\n          <Form.Group controlId='oldPassword'>\n            <Form.Label>Old password</Form.Label>\n            <Form.Control\n              required\n              name='oldPassword'\n              value={oldPassword}\n              type='password'\n              placeholder='Old Password'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Form.Group controlId='newPassword'>\n            <Form.Label>New Password</Form.Label>\n            <Form.Control\n              required\n              name='newPassword'\n              value={newPassword}\n              type='password'\n              placeholder='New Password'\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Button variant='primary' type='submit'>Submit</Button>\n        </Form>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default withRouter(ChangePassword)\n","import apiUrl from '../apiConfig'\nimport axios from 'axios'\n\n// Create World\nexport const createWorld = (data, user) => {\n  return axios({\n    url: apiUrl + '/worlds/',\n    method: 'POST',\n    data: {\n      world: {\n        game: data.game,\n        name: data.name,\n        setting: data.setting,\n        description: data.description\n      }\n    },\n    headers: {\n      Authorization: 'Token ' + user.token\n    }\n  })\n}\n\n// Index request\n// no data, we will need a token\nexport const indexAllWorlds = (user) => {\n  return axios({\n    // method key sets the HTTP verb/method for this request\n    // GET is the default method, so we can include or not up to us\n    method: 'GET',\n    url: apiUrl + '/worlds/',\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// GET /worlds/:id, requires token\nexport const showWorld = (id, user) => {\n  return axios({\n    url: apiUrl + '/worlds/' + id + '/',\n    // method is optional, default is GET\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// DELETE /worlds/:id, requires token\nexport const deleteWorld = (id, user) => {\n  return axios({\n    url: apiUrl + '/worlds/' + id + '/',\n    method: 'DELETE',\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// PATCH /worlds/:id, requires token\nexport const updateWorld = (data, id, user) => {\n  return axios({\n    url: apiUrl + '/worlds/' + id + '/',\n    method: 'patch',\n    data: {\n      world: {\n        game: data.game,\n        name: data.name,\n        setting: data.setting,\n        description: data.description\n      }\n    },\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { createWorld } from '../../api/world'\nimport { createWorldSuccess, createWorldFailure } from '../AutoDismissAlert/messages'\n// import './post.scss'\n\n// create class, constructor, and state for Create World\nclass CreateWorld extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      game: '',\n      name: '',\n      setting: '',\n      description: ''\n    }\n  }\n\n  // changes state of input values\n  handleChange = (event) =>\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n\n  // create a post on click\n  onCreateWorld = (event) => {\n    // prevent page refresh on click\n    event.preventDefault()\n    // destructuring props for use later\n    const { msgAlert, history, user } = this.props\n    // create a post API call\n    createWorld(this.state, user)\n      .then(() =>\n        msgAlert({\n          heading: 'World Created',\n          message: createWorldSuccess,\n          variant: 'success'\n        })\n      )\n      // redirect after world created\n      .then((res) => history.push('/worlds/'))\n      .catch((error) => {\n        this.setState({\n          game: '',\n          name: '',\n          setting: '',\n          description: ''\n        })\n        msgAlert({\n          heading: 'Failed with error: ' + error.message,\n          message: createWorldFailure,\n          variant: 'danger'\n        })\n      })\n  }\n\n  render () {\n    // destructuring state for later use\n    const { game, name, setting, description } = this.state\n    // create create post form\n    return (\n      <>\n        <div className='row' id='showWorld'>\n          <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n            <center>\n              <h3 className='register'>The Energies and Elements of the Universe are beginning to collide...</h3>\n            </center>\n            <Form onSubmit={this.onCreateWorld}>\n              <Form.Group controlId='game'>\n                <Form.Label>What are the rules your world abides by?</Form.Label>\n                <Form.Control\n                  required\n                  name='game'\n                  value={game}\n                  placeholder='Rule Set'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='name'>\n                <Form.Label>World Name:</Form.Label>\n                <Form.Control\n                  required\n                  name='name'\n                  value={name}\n                  placeholder='World Name'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='setting'>\n                <Form.Label>Setting of your World:</Form.Label>\n                <Form.Control\n                  name='setting'\n                  value={setting}\n                  placeholder='World Setting'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='description'>\n                <Form.Label>Description of the people, places, and history of your World:</Form.Label>\n                <Form.Control\n                  required\n                  name='description'\n                  value={description}\n                  placeholder='Description'\n                  as='textarea'\n                  rows={4}\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <div className='d-grid gap-2 col-6 mx-auto'>\n                <Button variant='btn btn-secondary' type='submit'>\n                    IGNITE\n                </Button>\n              </div>\n              <Link to={'/worlds/'} className=\"btn btn-primary\">Cancel</Link>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default withRouter(CreateWorld)\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { indexAllWorlds } from '../../api/world'\nimport { showIndexSuccess, showIndexFailure } from '../AutoDismissAlert/messages'\nimport Card from 'react-bootstrap/Card'\n// import './world.scss'\n// import './IndexWorld.scss'\n// create index of all worlds class and constructor with state\nclass IndexAllWorlds extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      world: null,\n      loading: true\n    }\n  }\n\n  // occurs on page render first time\n  componentDidMount () {\n    const { user, msgAlert } = this.props\n    // API call for index of all worlds\n    indexAllWorlds(user)\n      .then((response) =>\n        this.setState({\n          world: response.data.worlds,\n          loading: false\n        })\n      )\n      .then(() =>\n        msgAlert({\n          heading: 'Index Success',\n          message: showIndexSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Index Fail',\n          message: showIndexFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  render () {\n    // if statement handles the issue when state is null\n    // cannot handle initial render with null.\n    if (this.state.world === null) {\n      return 'loading...'\n    }\n    // variable to save array.map()\n    if (this.world === null) {\n      <h3>No world</h3>\n    }\n\n    // create list of worlds\n    console.log(this.state.world)\n    const worldJsx = this.state.world.map((world) => (\n      <li key={world.id}>\n        <Card className='box-world' style={{ width: '80%' }}>\n          <Card.Body className='bg-box'>\n            <Link className='link-title' to={`/worlds/${world.id}`}>\n              <Card.Title className='title-world'>{world.name}</Card.Title>\n            </Link>\n            {/* <Card.Subtitle className='mb-2 text-muted'>\n            Creator: {world.owner}\n            </Card.Subtitle> */}\n            <Card.Subtitle className='mb-2 text-muted'>\n            Game: {world.game}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Setting: {world.setting}\n            </Card.Subtitle>\n            <Card.Text>Description: {world.description}</Card.Text>\n          </Card.Body>\n        </Card>\n        <br />\n      </li>\n    ))\n\n    return (\n      <div>\n\n        {/* <br />\n        <h1 className='topic'>Share your thought ..</h1>\n\n        <NavLink to='/create-post'>\n          <button\n            type='button'\n            className='btn btn-secondary btn-lg'\n            id='create-btn'>\n                        Create Post\n          </button>\n        </NavLink> */}\n        <p>{this.state.loading && 'loading ...'}</p>\n\n        {/* display posts */}\n        <ul>{worldJsx.reverse()}</ul>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(IndexAllWorlds)\n","import React, { Fragment } from 'react'\nimport Card from 'react-bootstrap/Card'\n// import Comment from './CommentForm'\n// import '../post/post.scss'\n\n// create show post format\n// const styles = {\n//   cardImage: {\n//     objectFit: 'contain',\n//     width: '50vw',\n//     height: '30vh',\n//     border: 'none'\n//   }\n// }\n\nconst World = (props) => (\n  <Fragment>\n    <Card id='showWorld-bg' style={{ width: '100%' }}>\n      <Card.Body>\n        <center>\n          <h2 className='register'> {props.name}</h2>{' '}\n        </center>\n        <h4>Rule Set: {props.game}</h4>\n        <h6>Setting: {props.setting}</h6>\n        {/* <h6>Creator</h6>\n        <Card.Subtitle className='mb-2 text-muted'>\n          {props.owner}\n        </Card.Subtitle> */}\n        <h6>Description: </h6>\n        <Card.Text>{props.description}</Card.Text>\n        {/* <h6>Image</h6>\n        <img src={props.image} style={styles.cardImage} alt='No image' /> */}\n        {/* <Card.Text>\n          {props.comments.map(({ id, text, image, id }) => (\n            // passing props to comment form component\n            <Comment\n              key={id}\n              text={text}\n              image={image}\n              id={id}\n              postId={props.postId}\n              // here we are carrying through onClick from Post to be handed down to Comment\n              onClick={props.onClick}\n              // onClickUpdate={props.onClickUpdate}\n            />\n          ))}\n        </Card.Text> */}\n      </Card.Body>\n    </Card>\n  </Fragment>\n)\n\nexport default World\n","import React, { Component } from 'react'\n// add Link\nimport { withRouter, Link } from 'react-router-dom'\n// API request\nimport { showWorld, deleteWorld } from '../../api/world'\n// import { deleteComment } from '../../api/comment'\nimport Button from 'react-bootstrap/Button'\nimport World from './WorldComponent'\nimport {\n  showWorldFailure, showWorldSuccess, deleteWorldFailure, deleteWorldSuccess\n} from '../AutoDismissAlert/messages'\n// import './world.scss'\n// creates single show world with constructor, state\nclass ShowWorld extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      world: {\n        game: '',\n        name: '',\n        setting: '',\n        description: '',\n        // image: '',\n        // comments: [],\n        owner: ''\n      }\n    }\n  }\n\n  // on initial page render\n  componentDidMount () {\n    // destructuring props for later use\n    const { match, user, msgAlert } = this.props\n    // show world API call\n    showWorld(match.params.id, user)\n\n      // sets state of world\n      .then((res) => {\n        return this.setState({ world: res.data.world })\n      })\n      .then(() =>\n        msgAlert({\n          heading: 'Show world success',\n          message: showWorldSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Show world failed',\n          message: showWorldFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  handleDeleteWorld = (event) => {\n    const { match, user, msgAlert, history } = this.props\n    deleteWorld(match.params.id, user)\n    // Redirect to the list of posts\n      .then(() => history.push('/worlds'))\n      .then(() =>\n        msgAlert({\n          heading: 'Deleted World successfully',\n          message: deleteWorldSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Delete World failed',\n          message: deleteWorldFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  // // handles delete comment\n  // handleDeleteComment = (id) => {\n  //   // destructuring props for later use\n  //   const { match, user, msgAlert, history } = this.props\n  //   // delete comment API call\n  //   deleteComment(match.params.id, id, user)\n  //     .then(() =>\n  //       msgAlert({\n  //         heading: 'Delete comment successfully',\n  //         message: deleteCommentSuccess,\n  //         variant: 'success'\n  //       })\n  //     )\n  //   // Redirect to the list of posts\n  //     .then(() => history.push('/posts-all/'))\n  //     .catch(() =>\n  //       msgAlert({\n  //         heading: 'Delete post failed :(',\n  //         message: deleteCommentFailure,\n  //         variant: 'danger'\n  //       })\n  //     )\n  // }\n\n  render () {\n    // destructuring state of world for later use\n    // removed owner below for v1\n    const { name, game, setting, description, id } = this.state.world\n    // if no image show 'default image'\n    // if (image === '') {\n    return (\n      <div>\n        {/* bringing in the component World that is accepting passed down data as props */}\n        <br />\n        <World\n          // id='showWorld-bg'\n          name={name}\n          game={game}\n          setting={setting}\n          description={description}\n          // image={\n          //   'https://image.shutterstock.com/image-vector/default-word-digital-style-glowing-600w-1668796114.jpg'\n          // }\n          // comments={comments}\n          // owner={owner}\n          worldId={id}\n          // our functions are passed to WorldComponent\n          // onClick={this.handleDeleteComment}\n          // onClickUpdate={this.handleUpdateComment}\n        />\n        <br />\n        {/* button to delete world */}\n        { this.props.user.id === this.state.world.owner\n          ? <Button\n            onClick={this.handleDeleteWorld}\n            variant='danger'>\n                          Delete World\n          </Button>\n          : '' }\n        {this.props.user.id === this.state.world.owner\n          ? <Link\n            to={`/worlds/${this.state.world.id}/edit`}\n            className='btn btn-outline-secondary'>\n                      Transmute Your World\n          </Link>\n          : <p></p>}\n        {/* create comment */}\n        {/* <div className='divider' /> */}\n        {/* <Link to={`/comments/${id}`} class='btn btn-secondary'>\n                          Make Comment\n          </Link> */}\n      </div>\n    )\n    // } else {\n    //   return (\n    //     <div>\n    //       {/* bringing in the component Post that is accepting passed down data as props */}\n    //       <br />\n    //       <Post\n    //         id='showPost-bg'\n    //         title={title}\n    //         subject={subject}\n    //         content={content}\n    //         image={image}\n    //         comments={comments}\n    //         userEmail={userEmail}\n    //         postId={id}\n    //         // our functions are passed to PostForm\n    //         onClick={this.handleDeleteComment}\n    //         onClickUpdate={this.handleUpdateComment}\n    //       />\n\n    //       <br />\n    //       { this.props.user.id === this.state.post.owner\n    //         ? <Button\n    //           onClick={this.handleDeletePost}\n    //           variant='danger'>\n    //                       Delete Post\n    //         </Button>\n    //         : '' }\n    //       {/* button to delete post */}\n\n    //       {/* create comment */}\n    //       <div className='divider' />\n    //       <Link to={`/comments/${id}`} class='btn btn-secondary'>\n    //                       Make Comment\n    //       </Link>\n    //     </div>\n    //   )\n    // }\n  }\n}\n\nexport default withRouter(ShowWorld)\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\n// API request\nimport { updateWorld, showWorld } from '../../api/world'\nimport { updateWorldSuccess, updateWorldFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n// import './post.scss'\n// create class for update post with constructor and state\nclass UpdateWorld extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      world: {\n        game: '',\n        name: '',\n        setting: '',\n        description: ''\n      }\n    }\n  }\n\n  // on page load\n  componentDidMount () {\n    // destructuring props for later use\n    const { match, user, msgAlert } = this.props\n    // show world API call\n    showWorld(match.params.id, user)\n      // sets new state of world\n      .then(res => this.setState({ world: res.data.world }))\n      .catch(err => msgAlert({\n        heading: 'Show World failed',\n        message: 'Something went wrong: ' + err.message,\n        variant: 'danger'\n      }))\n  }\n\n    // handles state change for input\n    handleChange = (event) => {\n      const userInput = { [event.target.name]: event.target.value }\n      this.setState(currState => {\n        // \"Spread\" out current world state key/value pairs\n        return { world: { ...currState.world, ...userInput } }\n      })\n    }\n\n    // updates world on click\n    onUpdateWorld = (event) => {\n      // prevent page reload\n      event.preventDefault()\n      // destructuring props for later use\n      const { user, msgAlert, history, match } = this.props\n      // updateWorld API call\n      updateWorld(this.state.world, match.params.id, user)\n        .then(() => msgAlert({\n          heading: 'World Updated',\n          message: updateWorldSuccess,\n          variant: 'success'\n        }))\n        .then(res => history.push('/worlds'))\n        .catch(() => {\n          msgAlert({\n            heading: 'World update failed',\n            message: updateWorldFailure,\n            variant: 'danger'\n          })\n        })\n    }\n\n    render () {\n      // destructuring state of world for later use\n      const { game, name, setting, description } = this.state.world\n      // update world form\n      return (\n        <>\n          <div className='row' id='showWorld'>\n            <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n              <h3 className='register'>Transmute World</h3>\n              <Form onSubmit={this.onUpdateWorld}>\n                <Form.Group controlId='name'>\n                  <Form.Label>World Name:</Form.Label>\n                  <Form.Control\n                    required\n                    name='name'\n                    value={name}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId='game'>\n                  <Form.Label>Rule Set:</Form.Label>\n                  <Form.Control\n                    required\n                    name='game'\n                    value={game}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId='setting'>\n                  <Form.Label>Setting:</Form.Label>\n                  <Form.Control\n                    required\n                    name='setting'\n                    value={setting}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId='description'>\n                  <Form.Label>Description:</Form.Label>\n                  <Form.Control\n                    name='description'\n                    value={description}\n                    placeholder='description'\n                    as='textarea'\n                    rows={4}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <div className='d-grid gap-2 col-6 mx-auto'>\n                  <Button variant='primary' type='submit'>\n                    Transmute\n                  </Button>\n                </div>\n                <Link to={'/worlds/'} className=\"btn btn-primary\">Cancel</Link>\n              </Form>\n            </div>\n          </div>\n        </>\n      )\n    }\n}\n\nexport default withRouter(UpdateWorld)\n","import apiUrl from '../apiConfig'\nimport axios from 'axios'\n\n// Create Character\nexport const createCharacter = (data, user) => {\n  return axios({\n    url: apiUrl + '/characters/',\n    method: 'POST',\n    data: {\n      character: {\n        game: data.game,\n        name: data.name,\n        level: data.level,\n        race: data.race,\n        discipline: data.discipline,\n        background: data.background,\n        description: data.description,\n        abilities: data.abilities,\n        items: data.items,\n        backstory: data.backstory\n      }\n    },\n    headers: {\n      Authorization: 'Token ' + user.token\n    }\n  })\n}\n\n// Index request\n// no data, we will need a token\nexport const indexAllCharacters = (user) => {\n  return axios({\n    // method key sets the HTTP verb/method for this request\n    // GET is the default method, so we can include or not up to us\n    method: 'GET',\n    url: apiUrl + '/characters/',\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// GET /characters/:id, requires token\nexport const showCharacter = (id, user) => {\n  return axios({\n    url: apiUrl + '/characters/' + id + '/',\n    // method is optional, default is GET\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// DELETE /characters/:id, requires token\nexport const deleteCharacter = (id, user) => {\n  return axios({\n    url: apiUrl + '/characters/' + id + '/',\n    method: 'DELETE',\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n\n// PATCH /characters/:id, requires token\nexport const updateCharacter = (data, id, user) => {\n  return axios({\n    url: apiUrl + '/characters/' + id + '/',\n    method: 'patch',\n    data: {\n      character: {\n        game: data.game,\n        name: data.name,\n        level: data.level,\n        race: data.race,\n        discipline: data.discipline,\n        background: data.background,\n        description: data.description,\n        abilities: data.abilities,\n        items: data.items,\n        backstory: data.backstory\n      }\n    },\n    headers: {\n      Authorization: `Token ${user.token}`\n    }\n  })\n}\n","/* eslint-disable camelcase */\nimport React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { createCharacter } from '../../api/character'\nimport { createCharacterSuccess, createCharacterFailure } from '../AutoDismissAlert/messages'\n// import './post.scss'\n\n// create class, constructor, and state for Create Character\nclass CreateCharacter extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      game: '',\n      name: '',\n      level: '',\n      race: '',\n      discipline: '',\n      background: '',\n      description: '',\n      abilities: '',\n      items: '',\n      backstory: ''\n    }\n  }\n\n  // changes state of input values\n  handleChange = (event) =>\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n\n  // create a post on click\n  onCreateCharacter = (event) => {\n    // prevent page refresh on click\n    event.preventDefault()\n    // destructuring props for use later\n    const { msgAlert, history, user } = this.props\n    // create a post API call\n    createCharacter(this.state, user)\n      .then(() =>\n        msgAlert({\n          heading: 'Character Created',\n          message: createCharacterSuccess,\n          variant: 'success'\n        })\n      )\n      // redirect after character created\n      .then((res) => history.push('/characters/'))\n      .catch((error) => {\n        // this.setState({\n        //   game: '',\n        //   name: '',\n        //   setting: '',\n        //   description: ''\n        // })\n        msgAlert({\n          heading: 'Failed with error: ' + error.message,\n          message: createCharacterFailure,\n          variant: 'danger'\n        })\n      })\n  }\n\n  render () {\n    // destructuring state for later use\n    const { game, name, level, race, discipline, background, description, abilities, items, backstory } = this.state\n    // create create character form\n    return (\n      <>\n        <div className='row' id='showCharacter'>\n          <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n            <center>\n              <h3 className='register'>The block of clay before you is eager to be sculpted...</h3>\n            </center>\n            <Form onSubmit={this.onCreateCharacter}>\n              <Form.Group controlId='game'>\n                <Form.Label>What are the laws of nature your character is bound by?</Form.Label>\n                <Form.Control\n                  required\n                  name='game'\n                  value={game}\n                  placeholder='Rule Set'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='name'>\n                <Form.Label>What name shall the ballads sing?:</Form.Label>\n                <Form.Control\n                  required\n                  name='name'\n                  value={name}\n                  placeholder='Character Name'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='level'>\n                <Form.Label>What level of skill does your Character posses?:</Form.Label>\n                <Form.Control\n                  name='level'\n                  value={level}\n                  type='number'\n                  placeholder='Character Level'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='race'>\n                <Form.Label>From what lineage does your Character descend?:</Form.Label>\n                <Form.Control\n                  name='race'\n                  value={race}\n                  placeholder='Character Race'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='discipline'>\n                <Form.Label>What discipline does your Character study?:</Form.Label>\n                <Form.Control\n                  name='discipline'\n                  value={discipline}\n                  placeholder='Character Class'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='background'>\n                <Form.Label>In what conditions or profession has your Character lived their life?:</Form.Label>\n                <Form.Control\n                  name='background'\n                  value={background}\n                  placeholder='Character Background'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='description'>\n                <Form.Label>Description of the appearance and mannerisms of your Character:</Form.Label>\n                <Form.Control\n                  required\n                  name='description'\n                  value={description}\n                  placeholder='Description'\n                  as='textarea'\n                  rows={4}\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='abilities'>\n                <Form.Label>What special abilities does your Character posses?:</Form.Label>\n                <Form.Control\n                  name='abilities'\n                  value={abilities}\n                  placeholder='Character Abilities'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='items'>\n                <Form.Label>With what does your Character do battle? What trinkets or artifacts do they hold dear?:</Form.Label>\n                <Form.Control\n                  name='items'\n                  value={items}\n                  placeholder='Character Weapons and Items'\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <Form.Group controlId='backstory'>\n                <Form.Label>Who is your Character? What tales do they have to tell?:</Form.Label>\n                <Form.Control\n                  name='backstory'\n                  value={backstory}\n                  placeholder='Character Backstory'\n                  as='textarea'\n                  rows={4}\n                  onChange={this.handleChange}\n                />\n              </Form.Group>\n              <br />\n              <div className='d-grid gap-2 col-6 mx-auto'>\n                <Button variant='btn btn-secondary' type='submit'>\n                    GIVE THEM LIFE\n                </Button>\n              </div>\n              <Link to={'/worlds/'} className=\"btn btn-primary\">Cancel</Link>\n            </Form>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default withRouter(CreateCharacter)\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { indexAllCharacters } from '../../api/character'\nimport { showCharacterIndexSuccess, showCharacterIndexFailure } from '../AutoDismissAlert/messages'\nimport Card from 'react-bootstrap/Card'\n// import Character from './CharacterComponent'\n// import './character.scss'\n// import './Indexcharacter.scss'\n// create index of all characters class and constructor with state\nclass IndexAllCharacters extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      character: null,\n      loading: true\n    }\n  }\n\n  // occurs on page render first time\n  componentDidMount () {\n    const { user, msgAlert } = this.props\n    // API call for index of all characters\n    indexAllCharacters(user)\n      .then((response) =>\n        this.setState({\n          character: response.data.characters,\n          loading: false\n        })\n      )\n      .then(() =>\n        msgAlert({\n          heading: 'Index Success',\n          message: showCharacterIndexSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Index Fail',\n          message: showCharacterIndexFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  render () {\n    // if statement handles the issue when state is null\n    // cannot handle initial render with null.\n    if (this.state.character === null) {\n      return 'loading...'\n    }\n    // variable to save array.map()\n    // if (this.state.character === null) {\n    //   return <h3>No Characters</h3>\n    // }\n\n    // create list of characters\n    // console.log(this.state.character)\n    // const { name, game, level, race, discipline, background, abilities, items, description, backstory } = this.state.character\n    const characterJsx = this.state.character.map((character) => (\n      <li key={character.id}>\n        {/* <Character\n          name={name}\n          game={game}\n          level={level}\n          race={race}\n          discipline={discipline}\n          background={background}\n          abilities={abilities}\n          items={items}\n          description={description}\n          backstory={backstory}\n        /> */}\n        <Card className='box-character' style={{ width: '80%' }}>\n          <Card.Body className='bg-box'>\n            <Link className='link-title' to={`/characters/${character.id}`}>\n              <Card.Title className='title-character'>{character.name}</Card.Title>\n            </Link>\n            {/* <Card.Subtitle className='mb-2 text-muted'>\n            Creator: {character.owner}\n            </Card.Subtitle> */}\n            <Card.Subtitle className='mb-2 text-muted'>\n            Game: {character.game}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Level:  {character.level}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Race: {character.race}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Class:  {character.discipline}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Background: {character.background}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Features and Abilities: {character.abilities}\n            </Card.Subtitle>\n            <Card.Subtitle className='mb-2 text-muted'>\n            Weapons and Items:  {character.items}\n            </Card.Subtitle>\n            <Card.Text>Description: {character.description}</Card.Text>\n            <Card.Text>Backstory: {character.backstory}</Card.Text>\n          </Card.Body>\n        </Card>\n        <br />\n      </li>\n    ))\n\n    return (\n      <div>\n\n        {/* <br />\n        <h1 className='topic'>Share your thought ..</h1>\n\n        <NavLink to='/create-post'>\n          <button\n            type='button'\n            className='btn btn-secondary btn-lg'\n            id='create-btn'>\n                        Create Post\n          </button>\n        </NavLink> */}\n        <p>{this.state.loading && 'loading ...'}</p>\n\n        {/* display posts */}\n        <ul>{characterJsx.reverse()}</ul>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(IndexAllCharacters)\n","import React, { Fragment } from 'react'\nimport Card from 'react-bootstrap/Card'\n// import Comment from './CommentForm'\n// import '../post/post.scss'\n\n// create show post format\n// const styles = {\n//   cardImage: {\n//     objectFit: 'contain',\n//     width: '50vw',\n//     height: '30vh',\n//     border: 'none'\n//   }\n// }\n\nconst Character = (props) => (\n  <Fragment>\n    <Card id='showCharacter-bg' style={{ width: '100%' }}>\n      <Card.Body>\n        <center>\n          <h2 className='register'> {props.name}</h2>{' '}\n        </center>\n        {/* <h6>Creator</h6>\n        <Card.Subtitle className='mb-2 text-muted'>\n          {props.owner}\n        </Card.Subtitle> */}\n        <h4>Rule Set: {props.game}</h4>\n        <h6>Level: {props.level}</h6>\n        <h6>Race: {props.race}</h6>\n        <h6>Class: {props.discipline}</h6>\n        <h6>Background: {props.background}</h6>\n        <h6>Abilities: {props.abilities}</h6>\n        <h6>Items: {props.items}</h6>\n        <h6>Description: </h6>\n        <Card.Text>{props.description}</Card.Text>\n        <h6>Backstory: </h6>\n        <Card.Text>{props.backstory}</Card.Text>\n        {/* <h6>Image</h6>\n        <img src={props.image} style={styles.cardImage} alt='No image' /> */}\n        {/* <Card.Text>\n          {props.comments.map(({ id, text, image, id }) => (\n            // passing props to comment form component\n            <Comment\n              key={id}\n              text={text}\n              image={image}\n              id={id}\n              postId={props.postId}\n              // here we are carrying through onClick from Post to be handed down to Comment\n              onClick={props.onClick}\n              // onClickUpdate={props.onClickUpdate}\n            />\n          ))}\n        </Card.Text> */}\n      </Card.Body>\n    </Card>\n  </Fragment>\n)\n\nexport default Character\n","import React, { Component } from 'react'\n// add Link\nimport { withRouter, Link } from 'react-router-dom'\n// API request\nimport { showCharacter, deleteCharacter } from '../../api/character'\n// import { deleteComment } from '../../api/comment'\nimport Button from 'react-bootstrap/Button'\nimport Character from './CharacterComponent'\nimport {\n  showCharacterFailure, showCharacterSuccess, deleteCharacterFailure, deleteCharacterSuccess\n} from '../AutoDismissAlert/messages'\n// import './character.scss'\n// creates single show character with constructor, state\nclass ShowCharacter extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      character: {\n        game: '',\n        name: '',\n        level: '',\n        race: '',\n        discipline: '',\n        background: '',\n        description: '',\n        abilities: '',\n        items: '',\n        backstory: ''\n      }\n    }\n  }\n\n  // on initial page render\n  componentDidMount () {\n    // destructuring props for later use\n    const { match, user, msgAlert } = this.props\n    // show character API call\n    showCharacter(match.params.id, user)\n\n      // sets state of character\n      .then((res) => {\n        return this.setState({ character: res.data.character })\n      })\n      .then(() =>\n        msgAlert({\n          heading: 'Show Character success',\n          message: showCharacterSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Show Character failed',\n          message: showCharacterFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  handleDeleteCharacter = (event) => {\n    const { match, user, msgAlert, history } = this.props\n    deleteCharacter(match.params.id, user)\n    // Redirect to the list of posts\n      .then(() => history.push('/characters'))\n      .then(() =>\n        msgAlert({\n          heading: 'Deleted Character successfully',\n          message: deleteCharacterSuccess,\n          variant: 'success'\n        })\n      )\n      .catch(() =>\n        msgAlert({\n          heading: 'Delete Character failed',\n          message: deleteCharacterFailure,\n          variant: 'danger'\n        })\n      )\n  }\n\n  // // handles delete comment\n  // handleDeleteComment = (id) => {\n  //   // destructuring props for later use\n  //   const { match, user, msgAlert, history } = this.props\n  //   // delete comment API call\n  //   deleteComment(match.params.id, id, user)\n  //     .then(() =>\n  //       msgAlert({\n  //         heading: 'Delete comment successfully',\n  //         message: deleteCommentSuccess,\n  //         variant: 'success'\n  //       })\n  //     )\n  //   // Redirect to the list of posts\n  //     .then(() => history.push('/posts-all/'))\n  //     .catch(() =>\n  //       msgAlert({\n  //         heading: 'Delete post failed :(',\n  //         message: deleteCommentFailure,\n  //         variant: 'danger'\n  //       })\n  //     )\n  // }\n\n  render () {\n    // destructuring state of character for later use\n    // removed owner below for v1\n    const { game, name, level, race, discipline, background, description, abilities, items, backstory } = this.state.character\n    // if no image show 'default image'\n    // if (image === '') {\n    return (\n      <div>\n        {/* bringing in the component character that is accepting passed down data as props */}\n        <br />\n        <Character\n          // owner={owner}\n          name={name}\n          game={game}\n          level={level}\n          race={race}\n          discipline={discipline}\n          background={background}\n          abilities={abilities}\n          items={items}\n          description={description}\n          backstory={backstory}\n        />\n        <br />\n        {/* button to delete character */}\n        { this.props.user.id === this.state.character.owner\n          ? <Button\n            onClick={this.handleDeleteCharacter}\n            variant='danger'>\n            Destroy Character\n          </Button>\n          : '' }\n        {this.props.user.id === this.state.character.owner\n          ? <Link\n            to={`/characters/${this.state.character.id}/edit`}\n            className='btn btn-outline-secondary'>\n            Reshape Your Character\n          </Link>\n          : <p></p>}\n        {/* create comment */}\n        {/* <div className='divider' /> */}\n        {/* <Link to={`/comments/${id}`} class='btn btn-secondary'>\n                          Make Comment\n          </Link> */}\n      </div>\n    )\n    // } else {\n    //   return (\n    //     <div>\n    //       {/* bringing in the component Post that is accepting passed down data as props */}\n    //       <br />\n    //       <Post\n    //         id='showPost-bg'\n    //         title={title}\n    //         subject={subject}\n    //         content={content}\n    //         image={image}\n    //         comments={comments}\n    //         userEmail={userEmail}\n    //         postId={id}\n    //         // our functions are passed to PostForm\n    //         onClick={this.handleDeleteComment}\n    //         onClickUpdate={this.handleUpdateComment}\n    //       />\n\n    //       <br />\n    //       { this.props.user.id === this.state.post.owner\n    //         ? <Button\n    //           onClick={this.handleDeletePost}\n    //           variant='danger'>\n    //                       Delete Post\n    //         </Button>\n    //         : '' }\n    //       {/* button to delete post */}\n\n    //       {/* create comment */}\n    //       <div className='divider' />\n    //       <Link to={`/comments/${id}`} class='btn btn-secondary'>\n    //                       Make Comment\n    //       </Link>\n    //     </div>\n    //   )\n    // }\n  }\n}\n\nexport default withRouter(ShowCharacter)\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\n// API request\nimport { updateCharacter, showCharacter } from '../../api/character'\nimport { updateCharacterSuccess, updateCharacterFailure } from '../AutoDismissAlert/messages'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n// import './post.scss'\n// create class for update character with constructor and state\nclass UpdateCharacter extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      character: {\n        game: '',\n        name: '',\n        level: '',\n        race: '',\n        discipline: '',\n        background: '',\n        description: '',\n        abilities: '',\n        items: '',\n        backstory: ''\n      }\n    }\n  }\n\n  // on page load\n  componentDidMount () {\n    // destructuring props for later use\n    const { match, user, msgAlert } = this.props\n    // show character API call\n    showCharacter(match.params.id, user)\n      // sets new state of character\n      .then(res => this.setState({ character: res.data.character }))\n      .catch(err => msgAlert({\n        heading: 'Show Character failed',\n        message: 'Something went wrong: ' + err.message,\n        variant: 'danger'\n      }))\n  }\n\n    // handles state change for input\n    handleChange = (event) => {\n      const userInput = { [event.target.name]: event.target.value }\n      this.setState(currState => {\n        // \"Spread\" out current character state key/value pairs\n        return { character: { ...currState.character, ...userInput } }\n      })\n    }\n\n    // updates character on click\n    onUpdateCharacter = (event) => {\n      // prevent page reload\n      event.preventDefault()\n      // destructuring props for later use\n      const { user, msgAlert, history, match } = this.props\n      // updateCharacter API call\n      updateCharacter(this.state.character, match.params.id, user)\n        .then(() => msgAlert({\n          heading: 'Character Updated',\n          message: updateCharacterSuccess,\n          variant: 'success'\n        }))\n        .then(res => history.push('/characters'))\n        .catch(() => {\n          msgAlert({\n            heading: 'Character update failed',\n            message: updateCharacterFailure,\n            variant: 'danger'\n          })\n        })\n    }\n\n    render () {\n      // destructuring state of character for later use\n      const { game, name, level, race, discipline, background, description, abilities, items, backstory } = this.state.character\n      // update character form\n      return (\n        <>\n          <div className='row' id='showCharacter'>\n            <div className='col-sm-10 col-md-8 mx-auto mt-5'>\n              <center>\n                <h3 className='register'>The block of clay before you is eager to be sculpted...</h3>\n              </center>\n              <Form onSubmit={this.onUpdateCharacter}>\n                <Form.Group controlId='game'>\n                  <Form.Label>What are the laws of nature your character is bound by?</Form.Label>\n                  <Form.Control\n                    required\n                    name='game'\n                    value={game}\n                    placeholder='Rule Set'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='name'>\n                  <Form.Label>What name shall the ballads sing?:</Form.Label>\n                  <Form.Control\n                    required\n                    name='name'\n                    value={name}\n                    placeholder='Character Name'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='level'>\n                  <Form.Label>What level of skill does your Character posses?:</Form.Label>\n                  <Form.Control\n                    name='level'\n                    value={level}\n                    placeholder='Character Level'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='race'>\n                  <Form.Label>From what lineage does your Character descend?:</Form.Label>\n                  <Form.Control\n                    name='race'\n                    value={race}\n                    placeholder='Character Race'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='discipline'>\n                  <Form.Label>What discipline does your Character study?:</Form.Label>\n                  <Form.Control\n                    name='discipline'\n                    value={discipline}\n                    placeholder='Character Class'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='background'>\n                  <Form.Label>In what conditions or profession has your Character lived their life?:</Form.Label>\n                  <Form.Control\n                    name='background'\n                    value={background}\n                    placeholder='Character Background'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='description'>\n                  <Form.Label>Description of the appearance and mannerisms of your Character:</Form.Label>\n                  <Form.Control\n                    required\n                    name='description'\n                    value={description}\n                    placeholder='Description'\n                    as='textarea'\n                    rows={4}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='abilities'>\n                  <Form.Label>What special abilities does your Character posses?:</Form.Label>\n                  <Form.Control\n                    name='abilities'\n                    value={abilities}\n                    placeholder='Character Abilities'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='items'>\n                  <Form.Label>With what does your Character do battle? What trinkets or artifacts do they hold dear?:</Form.Label>\n                  <Form.Control\n                    name='items'\n                    value={items}\n                    placeholder='Character Weapons and Items'\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <Form.Group controlId='backstory'>\n                  <Form.Label>Who is your Character? What tales do they have to tell?:</Form.Label>\n                  <Form.Control\n                    name='backstory'\n                    value={backstory}\n                    placeholder='Character Backstory'\n                    as='textarea'\n                    rows={4}\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <br />\n                <div className='d-grid gap-2 col-6 mx-auto'>\n                  <Button variant='btn btn-secondary' type='submit'>\n                    GIVE THEM LIFE\n                  </Button>\n                </div>\n                <Link to={'/worlds/'} className=\"btn btn-primary\">Cancel</Link>\n              </Form>\n            </div>\n          </div>\n        </>\n      )\n    }\n}\n\nexport default withRouter(UpdateCharacter)\n","/* eslint-disable no-tabs */\nimport React, { Component, Fragment } from 'react'\nimport { Route } from 'react-router-dom'\nimport { v4 as uuid } from 'uuid'\n// import Container from 'react-bootstrap/Container'\n// import Col from 'react-bootstrap/Col'\nimport AuthenticatedRoute from './components/AuthenticatedRoute/AuthenticatedRoute'\nimport AutoDismissAlert from './components/AutoDismissAlert/AutoDismissAlert'\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport SignUp from './components/auth/SignUp'\nimport SignIn from './components/auth/SignIn'\nimport SignOut from './components/auth/SignOut'\nimport ChangePassword from './components/auth/ChangePassword'\n// worlds\nimport CreateWorld from './components/world/CreateWorld'\nimport IndexAllWorlds from './components/world/IndexWorld'\nimport ShowWorld from './components/world/ShowWorld'\nimport UpdateWorld from './components/world/UpdateWorld'\n// characters\nimport CreateCharacter from './components/character/CreateCharacter'\nimport IndexAllCharacters from './components/character/IndexCharacter'\nimport ShowCharacter from './components/character/ShowCharacter'\nimport UpdateCharacter from './components/character/UpdateCharacter'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      user: null,\n      msgAlerts: []\n    }\n  }\n\n  setUser = (user) => this.setState({ user })\n\n  clearUser = () => this.setState({ user: null })\n\n  deleteAlert = (id) => {\n    this.setState((state) => {\n      return { msgAlerts: state.msgAlerts.filter((msg) => msg.id !== id) }\n    })\n  }\n\n  msgAlert = ({ heading, message, variant }) => {\n    const id = uuid()\n    this.setState((state) => {\n      return {\n        msgAlerts: [...state.msgAlerts, { heading, message, variant, id }]\n      }\n    })\n  }\n\n  render () {\n    const { msgAlerts, user } = this.state\n\n    return (\n      <Fragment>\n        <Header user={user} />\n        {msgAlerts.map((msgAlert) => (\n          <AutoDismissAlert\n            key={msgAlert.id}\n            heading={msgAlert.heading}\n            variant={msgAlert.variant}\n            message={msgAlert.message}\n            id={msgAlert.id}\n            deleteAlert={this.deleteAlert}\n          />\n        ))}\n        <p>hello</p>\n        {/* <Container>\n          <Col xs={6} md={4}>\n            <Image src='/public/fantasy.svg' roundedCircle />\n          </Col>\n        </Container> */}\n        <Footer user={user} />\n        <main className='container'>\n          {/* User Routes */}\n          <Route\n            path='/sign-up/'\n            render={() => (\n              <SignUp msgAlert={this.msgAlert} setUser={this.setUser} />\n            )}\n          />\n          <Route\n            path='/sign-in/'\n            render={() => (\n              <SignIn msgAlert={this.msgAlert} setUser={this.setUser} />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            path='/sign-out/'\n            render={() => (\n              <SignOut\n                msgAlert={this.msgAlert}\n                clearUser={this.clearUser}\n                user={user}\n              />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            path='/change-pw/'\n            render={() => (\n              <ChangePassword msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n          {/* World Routes */}\n          <AuthenticatedRoute\n            user={user}\n            exact\n            path='/worlds/'\n            render={() => (\n              <IndexAllWorlds msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            exact\n            path='/worlds/:id'\n            render={() => <ShowWorld msgAlert={this.msgAlert} user={user} />}\n          />\n          <AuthenticatedRoute\n            user={user}\n            path='/create-world/'\n            render={() => <CreateWorld msgAlert={this.msgAlert} user={user} />}\n          />\n          <AuthenticatedRoute\n            user={user}\n            path='/worlds/:id/edit'\n            render={() => <UpdateWorld msgAlert={this.msgAlert} user={user} />}\n          />\n          {/* Character Routes */}\n          <AuthenticatedRoute\n            user={user}\n            path='/create-character/'\n            render={() => (\n              <CreateCharacter msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            exact\n            path='/characters/'\n            render={() => (\n              <IndexAllCharacters msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            exact\n            path='/characters/:id'\n            render={() => (\n              <ShowCharacter msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n          <AuthenticatedRoute\n            user={user}\n            path='/characters/:id/edit'\n            render={() => (\n              <UpdateCharacter msgAlert={this.msgAlert} user={user} />\n            )}\n          />\n        </main>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\n\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst appJsx = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(appJsx, document.getElementById('root'))\n"],"sourceRoot":""}